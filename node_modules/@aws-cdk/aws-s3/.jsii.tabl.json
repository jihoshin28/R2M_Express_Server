{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "a3fb238b791f212f2de9bf87c1625d6906fbdaac222f986c0a53ee5c652ec0b0": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyFirstBucket\")",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyFirstBucket\");",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = new Bucket(this, \"MyFirstBucket\");",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyFirstBucket');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 16
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyFirstBucket');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "ef54abdbd498fd9344a356a27ec66546f43baa0b39305bd5ad9620e53dd06b6a"
    },
    "840f0fbedaca2204dcf09dea059bb2ef2fe502b028490228c9432304e628b8bf": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyEncryptedBucket\",\n    encryption=s3.BucketEncryption.KMS\n)\n\n# you can access the encryption key:\nassert(bucket.encryption_key instanceof kms.Key)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyEncryptedBucket\", new BucketProps {\n    Encryption = BucketEncryption.KMS\n});\n\n// you can access the encryption key:\nAssert(bucket.EncryptionKey instanceof Key);",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyEncryptedBucket\")\n        .encryption(BucketEncryption.KMS)\n        .build();\n\n// you can access the encryption key:\nassert(bucket.getEncryptionKey() instanceof Key);",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyEncryptedBucket', {\n  encryption: s3.BucketEncryption.KMS,\n});\n\n// you can access the encryption key:\nassert(bucket.encryptionKey instanceof kms.Key);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 45
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#encryptionKey",
        "@aws-cdk/aws-s3.BucketEncryption",
        "@aws-cdk/aws-s3.BucketEncryption#KMS",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyEncryptedBucket', {\n  encryption: s3.BucketEncryption.KMS,\n});\n\n// you can access the encryption key:\nassert(bucket.encryptionKey instanceof kms.Key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "98": 1,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "209": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "d7498cf337ba580efd541885dce2aad62d2cb5e3e72742bf18ffbc7c85b293ab"
    },
    "49c0de2052cd3db0035ad4cb9444048954f903a12d6e30a549e7c16d1dc34436": {
      "translations": {
        "python": {
          "source": "my_kms_key = kms.Key(self, \"MyKey\")\n\nbucket = s3.Bucket(self, \"MyEncryptedBucket\",\n    encryption=s3.BucketEncryption.KMS,\n    encryption_key=my_kms_key\n)\n\nassert(bucket.encryption_key == my_kms_key)",
          "version": "1"
        },
        "csharp": {
          "source": "Key myKmsKey = new Key(this, \"MyKey\");\n\nBucket bucket = new Bucket(this, \"MyEncryptedBucket\", new BucketProps {\n    Encryption = BucketEncryption.KMS,\n    EncryptionKey = myKmsKey\n});\n\nAssert(bucket.EncryptionKey == myKmsKey);",
          "version": "1"
        },
        "java": {
          "source": "Key myKmsKey = new Key(this, \"MyKey\");\n\nBucket bucket = Bucket.Builder.create(this, \"MyEncryptedBucket\")\n        .encryption(BucketEncryption.KMS)\n        .encryptionKey(myKmsKey)\n        .build();\n\nassert(bucket.getEncryptionKey() == myKmsKey);",
          "version": "1"
        },
        "$": {
          "source": "const myKmsKey = new kms.Key(this, 'MyKey');\n\nconst bucket = new s3.Bucket(this, 'MyEncryptedBucket', {\n  encryption: s3.BucketEncryption.KMS,\n  encryptionKey: myKmsKey,\n});\n\nassert(bucket.encryptionKey === myKmsKey);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 56
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#encryptionKey",
        "@aws-cdk/aws-s3.BucketEncryption",
        "@aws-cdk/aws-s3.BucketEncryption#KMS",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myKmsKey = new kms.Key(this, 'MyKey');\n\nconst bucket = new s3.Bucket(this, 'MyEncryptedBucket', {\n  encryption: s3.BucketEncryption.KMS,\n  encryptionKey: myKmsKey,\n});\n\nassert(bucket.encryptionKey === myKmsKey);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "36": 1,
        "75": 16,
        "104": 2,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 2,
        "209": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "e1543988ff3118b0a338c8e75e24e9f3b0b2944108f65a992bfa71653ded43be"
    },
    "adae91f94bdd745173c12de053d30f620dfc7c396c43512eae0f74b335fc56ef": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyEncryptedBucket\",\n    encryption=s3.BucketEncryption.KMS,\n    bucket_key_enabled=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyEncryptedBucket\", new BucketProps {\n    Encryption = BucketEncryption.KMS,\n    BucketKeyEnabled = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyEncryptedBucket\")\n        .encryption(BucketEncryption.KMS)\n        .bucketKeyEnabled(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyEncryptedBucket', {\n  encryption: s3.BucketEncryption.KMS,\n  bucketKeyEnabled: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 69
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketEncryption",
        "@aws-cdk/aws-s3.BucketEncryption#KMS",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyEncryptedBucket', {\n  encryption: s3.BucketEncryption.KMS,\n  bucketKeyEnabled: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "025f4564baee680d2878f052d61e28ca16b9b11b0b92c6ce98940c02c6dd06dc"
    },
    "74f2639cae4a8c7dab231af7005b571d87b86d886df53cdfcec7e0d93cca461a": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"Buck\",\n    encryption=s3.BucketEncryption.KMS_MANAGED\n)\n\nassert(bucket.encryption_key == null)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"Buck\", new BucketProps {\n    Encryption = BucketEncryption.KMS_MANAGED\n});\n\nAssert(bucket.EncryptionKey == null);",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"Buck\")\n        .encryption(BucketEncryption.KMS_MANAGED)\n        .build();\n\nassert(bucket.getEncryptionKey() == null);",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'Buck', {\n  encryption: s3.BucketEncryption.KMS_MANAGED,\n});\n\nassert(bucket.encryptionKey == null);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 78
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#encryptionKey",
        "@aws-cdk/aws-s3.BucketEncryption",
        "@aws-cdk/aws-s3.BucketEncryption#KMS_MANAGED",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'Buck', {\n  encryption: s3.BucketEncryption.KMS_MANAGED,\n});\n\nassert(bucket.encryptionKey == null);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "34": 1,
        "75": 10,
        "100": 1,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "209": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "5f3acce179c81710f8be1d82f2bfcae449a536fb7cf55d1bd9f3de0513b833c6"
    },
    "65bbb0c3f3260aa2580f4c51dfca4c685aa5fdfebe94dc3b8265e938af034ea4": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\")\nresult = bucket.add_to_resource_policy(iam.PolicyStatement(\n    actions=[\"s3:GetObject\"],\n    resources=[bucket.arn_for_objects(\"file.txt\")],\n    principals=[iam.AccountRootPrincipal()]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nAddToResourcePolicyResult result = bucket.AddToResourcePolicy(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"s3:GetObject\" },\n    Resources = new [] { bucket.ArnForObjects(\"file.txt\") },\n    Principals = new [] { new AccountRootPrincipal() }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nAddToResourcePolicyResult result = bucket.addToResourcePolicy(PolicyStatement.Builder.create()\n        .actions(List.of(\"s3:GetObject\"))\n        .resources(List.of(bucket.arnForObjects(\"file.txt\")))\n        .principals(List.of(new AccountRootPrincipal()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket');\nconst result = bucket.addToResourcePolicy(new iam.PolicyStatement({\n  actions: ['s3:GetObject'],\n  resources: [bucket.arnForObjects('file.txt')],\n  principals: [new iam.AccountRootPrincipal()],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 91
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.AddToResourcePolicyResult",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#addToResourcePolicy",
        "@aws-cdk/aws-s3.BucketBase#arnForObjects"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket');\nconst result = bucket.addToResourcePolicy(new iam.PolicyStatement({\n  actions: ['s3:GetObject'],\n  resources: [bucket.arnForObjects('file.txt')],\n  principals: [new iam.AccountRootPrincipal()],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "192": 3,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "99f91d5a8db1d90653dbfa5abd952871ceda215f5e5dca68abc4db2234c905fe"
    },
    "ead248d9a3b3802c755881c0d2052ca6854da5a21551c72b714088c6111c153e": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket.from_bucket_name(self, \"existingBucket\", \"bucket-name\")\n\n# No policy statement will be added to the resource\nresult = bucket.add_to_resource_policy(iam.PolicyStatement(\n    actions=[\"s3:GetObject\"],\n    resources=[bucket.arn_for_objects(\"file.txt\")],\n    principals=[iam.AccountRootPrincipal()]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "IBucket bucket = Bucket.FromBucketName(this, \"existingBucket\", \"bucket-name\");\n\n// No policy statement will be added to the resource\nAddToResourcePolicyResult result = bucket.AddToResourcePolicy(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"s3:GetObject\" },\n    Resources = new [] { bucket.ArnForObjects(\"file.txt\") },\n    Principals = new [] { new AccountRootPrincipal() }\n}));",
          "version": "1"
        },
        "java": {
          "source": "IBucket bucket = Bucket.fromBucketName(this, \"existingBucket\", \"bucket-name\");\n\n// No policy statement will be added to the resource\nAddToResourcePolicyResult result = bucket.addToResourcePolicy(PolicyStatement.Builder.create()\n        .actions(List.of(\"s3:GetObject\"))\n        .resources(List.of(bucket.arnForObjects(\"file.txt\")))\n        .principals(List.of(new AccountRootPrincipal()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const bucket = s3.Bucket.fromBucketName(this, 'existingBucket', 'bucket-name');\n\n// No policy statement will be added to the resource\nconst result = bucket.addToResourcePolicy(new iam.PolicyStatement({\n  actions: ['s3:GetObject'],\n  resources: [bucket.arnForObjects('file.txt')],\n  principals: [new iam.AccountRootPrincipal()],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 103
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.AddToResourcePolicyResult",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-s3.IBucket#addToResourcePolicy",
        "@aws-cdk/aws-s3.IBucket#arnForObjects"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = s3.Bucket.fromBucketName(this, 'existingBucket', 'bucket-name');\n\n// No policy statement will be added to the resource\nconst result = bucket.addToResourcePolicy(new iam.PolicyStatement({\n  actions: ['s3:GetObject'],\n  resources: [bucket.arnForObjects('file.txt')],\n  principals: [new iam.AccountRootPrincipal()],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 1,
        "192": 3,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "ef3ca07d29019e3869818988bdc27380a0039034d6149001135c0d5193128e76"
    },
    "6597b7811d64548d85268feefcea2a7dc3f7a7de20fbf2f3e7675111ef8d914d": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\")\nresult = bucket.add_to_resource_policy(iam.PolicyStatement(\n    actions=[\"s3:GetObject\"],\n    resources=[bucket.arn_for_objects(\"file.txt\")],\n    principals=[iam.AccountRootPrincipal()]\n))\n\nif not result.statement_added:\n    pass",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nAddToResourcePolicyResult result = bucket.AddToResourcePolicy(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"s3:GetObject\" },\n    Resources = new [] { bucket.ArnForObjects(\"file.txt\") },\n    Principals = new [] { new AccountRootPrincipal() }\n}));\n\nif (!result.StatementAdded)\n{\n}",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nAddToResourcePolicyResult result = bucket.addToResourcePolicy(PolicyStatement.Builder.create()\n        .actions(List.of(\"s3:GetObject\"))\n        .resources(List.of(bucket.arnForObjects(\"file.txt\")))\n        .principals(List.of(new AccountRootPrincipal()))\n        .build());\n\nif (!result.getStatementAdded()) {\n}",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket');\nconst result = bucket.addToResourcePolicy(new iam.PolicyStatement({\n  actions: ['s3:GetObject'],\n  resources: [bucket.arnForObjects('file.txt')],\n  principals: [new iam.AccountRootPrincipal()],\n}));\n\nif (!result.statementAdded) {\n  // Uh-oh! Someone probably made a mistake here.\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 118
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.AddToResourcePolicyResult",
        "@aws-cdk/aws-iam.AddToResourcePolicyResult#statementAdded",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#addToResourcePolicy",
        "@aws-cdk/aws-s3.BucketBase#arnForObjects"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket');\nconst result = bucket.addToResourcePolicy(new iam.PolicyStatement({\n  actions: ['s3:GetObject'],\n  resources: [bucket.arnForObjects('file.txt')],\n  principals: [new iam.AccountRootPrincipal()],\n}));\n\nif (!result.statementAdded) {\n  // Uh-oh! Someone probably made a mistake here.\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "192": 3,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 3,
        "207": 1,
        "223": 1,
        "225": 2,
        "227": 1,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "7889f72aeb2698f6a4be82384e973190a6ad44efdfe8c1ed024b990c37e881cd"
    },
    "78cb23f0ef6e62752d3af28989750505b9ca0e2bf19e3e277a8a65d3211dfed1": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\")\nbucket.policy.apply_removal_policy(cdk.RemovalPolicy.RETAIN)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nbucket.Policy.ApplyRemovalPolicy(RemovalPolicy.RETAIN);",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nbucket.policy.applyRemovalPolicy(RemovalPolicy.RETAIN);",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket');\nbucket.policy?.applyRemovalPolicy(cdk.RemovalPolicy.RETAIN);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 134
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#policy",
        "@aws-cdk/aws-s3.BucketPolicy#applyRemovalPolicy",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket');\nbucket.policy?.applyRemovalPolicy(cdk.RemovalPolicy.RETAIN);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "28": 1,
        "75": 9,
        "104": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "2c620d39ea7e0ba9d5e120f241d46f081d82447abc92edf68eb6e0d05a8f54b9"
    },
    "28e512a0c62b13e5d4ba70a6731708568e4f4554372153d29c28ea8f4710ab5d": {
      "translations": {
        "python": {
          "source": "# my_lambda is of type Function\n\n\nbucket = s3.Bucket(self, \"MyBucket\")\nbucket.grant_read_write(my_lambda)",
          "version": "1"
        },
        "csharp": {
          "source": "Function myLambda;\n\n\nBucket bucket = new Bucket(this, \"MyBucket\");\nbucket.GrantReadWrite(myLambda);",
          "version": "1"
        },
        "java": {
          "source": "Function myLambda;\n\n\nBucket bucket = new Bucket(this, \"MyBucket\");\nbucket.grantReadWrite(myLambda);",
          "version": "1"
        },
        "$": {
          "source": "declare const myLambda: lambda.Function;\n\nconst bucket = new s3.Bucket(this, 'MyBucket');\nbucket.grantReadWrite(myLambda);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 143
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#grantReadWrite"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst bucket = new s3.Bucket(this, 'MyBucket');\nbucket.grantReadWrite(myLambda);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "bff97c54500596dad759ef6dde47c2c4f1dfda805876074acb430bed3be9657a"
    },
    "5b31c211e8852df24248dd8b127dc2441d939e05c3c127db3b92d973fa178603": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"Bucket\",\n    enforce_sSL=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"Bucket\", new BucketProps {\n    EnforceSSL = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"Bucket\")\n        .enforceSSL(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'Bucket', {\n  enforceSSL: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 159
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'Bucket', {\n  enforceSSL: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "15f6ff45d2d5958143c9ff51761c9dccbb546fe9667501a2deab46d85b946cbc"
    },
    "a179533ca40e4c0791e2c038c66c481b915033c76f8bab64b76fd79cf33670d4": {
      "translations": {
        "python": {
          "source": "#\n# Stack that defines the bucket\n#\nclass Producer(cdk.Stack):\n\n    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        bucket = s3.Bucket(self, \"MyBucket\",\n            removal_policy=cdk.RemovalPolicy.DESTROY\n        )\n        self.my_bucket = bucket\n\n#\n# Stack that consumes the bucket\n#\nclass Consumer(cdk.Stack):\n    def __init__(self, scope, id, *, userBucket, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, userBucket=userBucket, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        user = iam.User(self, \"MyUser\")\n        user_bucket.grant_read_write(user)\n\nproducer = Producer(app, \"ProducerStack\")\nConsumer(app, \"ConsumerStack\", user_bucket=producer.my_bucket)",
          "version": "1"
        },
        "csharp": {
          "source": "/**\n * Stack that defines the bucket\n */\nclass Producer : Stack\n{\n    public Bucket MyBucket { get; }\n\n    public Producer(App scope, string id, StackProps? props=null) : base(scope, id, props)\n    {\n\n        Bucket bucket = new Bucket(this, \"MyBucket\", new BucketProps {\n            RemovalPolicy = RemovalPolicy.DESTROY\n        });\n        MyBucket = bucket;\n    }\n}\n\nclass ConsumerProps : StackProps\n{\n    public IBucket UserBucket { get; set; }\n}\n\n/**\n * Stack that consumes the bucket\n */\nclass Consumer : Stack\n{\n    public Consumer(App scope, string id, ConsumerProps props) : base(scope, id, props)\n    {\n\n        User user = new User(this, \"MyUser\");\n        props.UserBucket.GrantReadWrite(user);\n    }\n}\n\nProducer producer = new Producer(app, \"ProducerStack\");\nnew Consumer(app, \"ConsumerStack\", new ConsumerProps { UserBucket = producer.MyBucket });",
          "version": "1"
        },
        "java": {
          "source": "/**\n * Stack that defines the bucket\n */\npublic class Producer extends Stack {\n    public final Bucket myBucket;\n\n    public Producer(App scope, String id) {\n        this(scope, id, null);\n    }\n\n    public Producer(App scope, String id, StackProps props) {\n        super(scope, id, props);\n\n        Bucket bucket = Bucket.Builder.create(this, \"MyBucket\")\n                .removalPolicy(RemovalPolicy.DESTROY)\n                .build();\n        this.myBucket = bucket;\n    }\n}\n\npublic class ConsumerProps extends StackProps {\n    private IBucket userBucket;\n    public IBucket getUserBucket() {\n        return this.userBucket;\n    }\n    public ConsumerProps userBucket(IBucket userBucket) {\n        this.userBucket = userBucket;\n        return this;\n    }\n}\n\n/**\n * Stack that consumes the bucket\n */\npublic class Consumer extends Stack {\n    public Consumer(App scope, String id, ConsumerProps props) {\n        super(scope, id, props);\n\n        User user = new User(this, \"MyUser\");\n        props.userBucket.grantReadWrite(user);\n    }\n}\n\nProducer producer = new Producer(app, \"ProducerStack\");\nnew Consumer(app, \"ConsumerStack\", new ConsumerProps().userBucket(producer.getMyBucket()));",
          "version": "1"
        },
        "$": {
          "source": "\n/**\n * Stack that defines the bucket\n */\nclass Producer extends cdk.Stack {\n  public readonly myBucket: s3.Bucket;\n\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const bucket = new s3.Bucket(this, 'MyBucket', {\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n    });\n    this.myBucket = bucket;\n  }\n}\n\ninterface ConsumerProps extends cdk.StackProps {\n  userBucket: s3.IBucket;\n}\n\n/**\n * Stack that consumes the bucket\n */\nclass Consumer extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props: ConsumerProps) {\n    super(scope, id, props);\n\n    const user = new iam.User(this, 'MyUser');\n    props.userBucket.grantReadWrite(user);\n  }\n}\n\nconst producer = new Producer(app, 'ProducerStack');\nnew Consumer(app, 'ConsumerStack', { userBucket: producer.myBucket });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 169
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-s3.IBucket#grantReadWrite",
        "@aws-cdk/core.App",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "/// !cdk-integ *\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as s3 from '../lib';\n\nconst app = new cdk.App();\n\n/// !show\n\n/**\n * Stack that defines the bucket\n */\nclass Producer extends cdk.Stack {\n  public readonly myBucket: s3.Bucket;\n\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const bucket = new s3.Bucket(this, 'MyBucket', {\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n    });\n    this.myBucket = bucket;\n  }\n}\n\ninterface ConsumerProps extends cdk.StackProps {\n  userBucket: s3.IBucket;\n}\n\n/**\n * Stack that consumes the bucket\n */\nclass Consumer extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props: ConsumerProps) {\n    super(scope, id, props);\n\n    const user = new iam.User(this, 'MyUser');\n    props.userBucket.grantReadWrite(user);\n  }\n}\n\nconst producer = new Producer(app, 'ProducerStack');\nnew Consumer(app, 'ConsumerStack', { userBucket: producer.myBucket });\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 4,
        "57": 1,
        "62": 1,
        "75": 58,
        "102": 2,
        "104": 3,
        "119": 1,
        "138": 1,
        "143": 2,
        "153": 5,
        "156": 6,
        "158": 1,
        "159": 1,
        "162": 2,
        "169": 6,
        "193": 2,
        "194": 11,
        "196": 3,
        "197": 4,
        "209": 1,
        "216": 3,
        "223": 2,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3,
        "245": 2,
        "246": 1,
        "279": 3,
        "281": 2
      },
      "fqnsFingerprint": "1751806a07253f39b73b3bb880fba137a7e46cd39d6495bb082ccbb593d8e4c9"
    },
    "ce59949be8a853213175c4947526bbd616ea7ee936cc66dbe439bec1c2f8b3cc": {
      "translations": {
        "python": {
          "source": "# my_lambda is of type Function\n\nbucket = s3.Bucket.from_bucket_attributes(self, \"ImportedBucket\",\n    bucket_arn=\"arn:aws:s3:::my-bucket\"\n)\n\n# now you can just call methods on the bucket\nbucket.add_event_notification(s3.EventType.OBJECT_CREATED, s3n.LambdaDestination(my_lambda), prefix=\"home/myusername/*\")",
          "version": "1"
        },
        "csharp": {
          "source": "Function myLambda;\n\nIBucket bucket = Bucket.FromBucketAttributes(this, \"ImportedBucket\", new BucketAttributes {\n    BucketArn = \"arn:aws:s3:::my-bucket\"\n});\n\n// now you can just call methods on the bucket\nbucket.AddEventNotification(EventType.OBJECT_CREATED, new LambdaDestination(myLambda), new NotificationKeyFilter { Prefix = \"home/myusername/*\" });",
          "version": "1"
        },
        "java": {
          "source": "Function myLambda;\n\nIBucket bucket = Bucket.fromBucketAttributes(this, \"ImportedBucket\", BucketAttributes.builder()\n        .bucketArn(\"arn:aws:s3:::my-bucket\")\n        .build());\n\n// now you can just call methods on the bucket\nbucket.addEventNotification(EventType.OBJECT_CREATED, new LambdaDestination(myLambda), NotificationKeyFilter.builder().prefix(\"home/myusername/*\").build());",
          "version": "1"
        },
        "$": {
          "source": "declare const myLambda: lambda.Function;\nconst bucket = s3.Bucket.fromBucketAttributes(this, 'ImportedBucket', {\n  bucketArn: 'arn:aws:s3:::my-bucket',\n});\n\n// now you can just call methods on the bucket\nbucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.LambdaDestination(myLambda), {prefix: 'home/myusername/*'});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 213
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-s3-notifications.LambdaDestination",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketAttributes",
        "@aws-cdk/aws-s3.BucketAttributes",
        "@aws-cdk/aws-s3.EventType",
        "@aws-cdk/aws-s3.EventType#OBJECT_CREATED",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-s3.IBucket#addEventNotification",
        "@aws-cdk/aws-s3.IBucketNotificationDestination",
        "@aws-cdk/aws-s3.NotificationKeyFilter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst bucket = s3.Bucket.fromBucketAttributes(this, 'ImportedBucket', {\n  bucketArn: 'arn:aws:s3:::my-bucket',\n});\n\n// now you can just call methods on the bucket\nbucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.LambdaDestination(myLambda), {prefix: 'home/myusername/*'});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ae85f30ec13a97b2a5c88d6ba477368e5d0a0eba2054189063c3d9cc4bcfc290"
    },
    "afb098aad002cde97de71399e05dce09ac709d431b9171aabb5f8cdf85f591b4": {
      "translations": {
        "python": {
          "source": "by_name = s3.Bucket.from_bucket_name(self, \"BucketByName\", \"my-bucket\")\nby_arn = s3.Bucket.from_bucket_arn(self, \"BucketByArn\", \"arn:aws:s3:::my-bucket\")",
          "version": "1"
        },
        "csharp": {
          "source": "IBucket byName = Bucket.FromBucketName(this, \"BucketByName\", \"my-bucket\");\nIBucket byArn = Bucket.FromBucketArn(this, \"BucketByArn\", \"arn:aws:s3:::my-bucket\");",
          "version": "1"
        },
        "java": {
          "source": "IBucket byName = Bucket.fromBucketName(this, \"BucketByName\", \"my-bucket\");\nIBucket byArn = Bucket.fromBucketArn(this, \"BucketByArn\", \"arn:aws:s3:::my-bucket\");",
          "version": "1"
        },
        "$": {
          "source": "const byName = s3.Bucket.fromBucketName(this, 'BucketByName', 'my-bucket');\nconst byArn  = s3.Bucket.fromBucketArn(this, 'BucketByArn', 'arn:aws:s3:::my-bucket');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 227
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketArn",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst byName = s3.Bucket.fromBucketName(this, 'BucketByName', 'my-bucket');\nconst byArn  = s3.Bucket.fromBucketArn(this, 'BucketByArn', 'arn:aws:s3:::my-bucket');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "104": 2,
        "194": 4,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "6ed0b034d60fd9460c8cdfa3a952e102318ca893c1181091a37cb7d0e5c5970d"
    },
    "a8c28d6c79f0c84ab82a231f0a19c69ab7860e861d9494770bf457ece86fa242": {
      "translations": {
        "python": {
          "source": "my_cross_region_bucket = s3.Bucket.from_bucket_attributes(self, \"CrossRegionImport\",\n    bucket_arn=\"arn:aws:s3:::my-bucket\",\n    region=\"us-east-1\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IBucket myCrossRegionBucket = Bucket.FromBucketAttributes(this, \"CrossRegionImport\", new BucketAttributes {\n    BucketArn = \"arn:aws:s3:::my-bucket\",\n    Region = \"us-east-1\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IBucket myCrossRegionBucket = Bucket.fromBucketAttributes(this, \"CrossRegionImport\", BucketAttributes.builder()\n        .bucketArn(\"arn:aws:s3:::my-bucket\")\n        .region(\"us-east-1\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const myCrossRegionBucket = s3.Bucket.fromBucketAttributes(this, 'CrossRegionImport', {\n  bucketArn: 'arn:aws:s3:::my-bucket',\n  region: 'us-east-1',\n});\n// myCrossRegionBucket.bucketRegionalDomainName === 'my-bucket.s3.us-east-1.amazonaws.com'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 235
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketAttributes",
        "@aws-cdk/aws-s3.BucketAttributes",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myCrossRegionBucket = s3.Bucket.fromBucketAttributes(this, 'CrossRegionImport', {\n  bucketArn: 'arn:aws:s3:::my-bucket',\n  region: 'us-east-1',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "c5a654e24b2691ca2b1bf44f66795e9b3b894007a1fcc5dd7888a21a1cdf2f89"
    },
    "31a9b854c09d6af88c651a6032d4b25e3828b8c3d6b9bba98609527de67dbdd1": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\")\ntopic = sns.Topic(self, \"MyTopic\")\nbucket.add_event_notification(s3.EventType.OBJECT_CREATED, s3n.SnsDestination(topic))",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nTopic topic = new Topic(this, \"MyTopic\");\nbucket.AddEventNotification(EventType.OBJECT_CREATED, new SnsDestination(topic));",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nTopic topic = new Topic(this, \"MyTopic\");\nbucket.addEventNotification(EventType.OBJECT_CREATED, new SnsDestination(topic));",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket');\nconst topic = new sns.Topic(this, 'MyTopic');\nbucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.SnsDestination(topic));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 255
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-notifications.SnsDestination",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#addEventNotification",
        "@aws-cdk/aws-s3.EventType",
        "@aws-cdk/aws-s3.EventType#OBJECT_CREATED",
        "@aws-cdk/aws-s3.IBucketNotificationDestination",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket');\nconst topic = new sns.Topic(this, 'MyTopic');\nbucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.SnsDestination(topic));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "02c0089746981972ac045e301d28be13dd9dda95bcb1d0a2464253bea758590c"
    },
    "1684710021bfdb58c0d08fbc7fad26b925a70105d6825e6bb2e1dfadb021a2df": {
      "translations": {
        "python": {
          "source": "# my_queue is of type Queue\n\nbucket = s3.Bucket(self, \"MyBucket\")\nbucket.add_event_notification(s3.EventType.OBJECT_REMOVED,\n    s3n.SqsDestination(my_queue), prefix=\"foo/\", suffix=\".jpg\")",
          "version": "1"
        },
        "csharp": {
          "source": "Queue myQueue;\n\nBucket bucket = new Bucket(this, \"MyBucket\");\nbucket.AddEventNotification(EventType.OBJECT_REMOVED,\nnew SqsDestination(myQueue), new NotificationKeyFilter { Prefix = \"foo/\", Suffix = \".jpg\" });",
          "version": "1"
        },
        "java": {
          "source": "Queue myQueue;\n\nBucket bucket = new Bucket(this, \"MyBucket\");\nbucket.addEventNotification(EventType.OBJECT_REMOVED,\nnew SqsDestination(myQueue), NotificationKeyFilter.builder().prefix(\"foo/\").suffix(\".jpg\").build());",
          "version": "1"
        },
        "$": {
          "source": "declare const myQueue: sqs.Queue;\nconst bucket = new s3.Bucket(this, 'MyBucket');\nbucket.addEventNotification(s3.EventType.OBJECT_REMOVED,\n  new s3n.SqsDestination(myQueue),\n  { prefix: 'foo/', suffix: '.jpg' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 270
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-notifications.SqsDestination",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#addEventNotification",
        "@aws-cdk/aws-s3.EventType",
        "@aws-cdk/aws-s3.EventType#OBJECT_REMOVED",
        "@aws-cdk/aws-s3.IBucketNotificationDestination",
        "@aws-cdk/aws-s3.NotificationKeyFilter",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myQueue: sqs.Queue;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst bucket = new s3.Bucket(this, 'MyBucket');\nbucket.addEventNotification(s3.EventType.OBJECT_REMOVED,\n  new s3n.SqsDestination(myQueue),\n  { prefix: 'foo/', suffix: '.jpg' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3d66e95fd4e874bbc111c5e4eb1a425657d087e37cb4ce363cfdfdd6e858d068"
    },
    "cdc9b35b6b797a2cc026af25a47108aa089f3ff8cb9ac6cfdab71caddca45181": {
      "translations": {
        "python": {
          "source": "# topic is of type Topic\n\nbucket = s3.Bucket.from_bucket_attributes(self, \"ImportedBucket\",\n    bucket_arn=\"arn:aws:s3:::my-bucket\"\n)\nbucket.add_event_notification(s3.EventType.OBJECT_CREATED, s3n.SnsDestination(topic))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic;\n\nIBucket bucket = Bucket.FromBucketAttributes(this, \"ImportedBucket\", new BucketAttributes {\n    BucketArn = \"arn:aws:s3:::my-bucket\"\n});\nbucket.AddEventNotification(EventType.OBJECT_CREATED, new SnsDestination(topic));",
          "version": "1"
        },
        "java": {
          "source": "Topic topic;\n\nIBucket bucket = Bucket.fromBucketAttributes(this, \"ImportedBucket\", BucketAttributes.builder()\n        .bucketArn(\"arn:aws:s3:::my-bucket\")\n        .build());\nbucket.addEventNotification(EventType.OBJECT_CREATED, new SnsDestination(topic));",
          "version": "1"
        },
        "$": {
          "source": "declare const topic: sns.Topic;\nconst bucket = s3.Bucket.fromBucketAttributes(this, 'ImportedBucket', {\n  bucketArn: 'arn:aws:s3:::my-bucket',\n});\nbucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.SnsDestination(topic));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 280
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-notifications.SnsDestination",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketAttributes",
        "@aws-cdk/aws-s3.BucketAttributes",
        "@aws-cdk/aws-s3.EventType",
        "@aws-cdk/aws-s3.EventType#OBJECT_CREATED",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-s3.IBucket#addEventNotification",
        "@aws-cdk/aws-s3.IBucketNotificationDestination",
        "@aws-cdk/aws-sns.ITopic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst bucket = s3.Bucket.fromBucketAttributes(this, 'ImportedBucket', {\n  bucketArn: 'arn:aws:s3:::my-bucket',\n});\nbucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.SnsDestination(topic));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b9355856022b4a1652af2df7be6978de5e238f8eba5a7bf3d947d04689bb0b21"
    },
    "449c32c629685a1b9aa8880b1654cf3996386ef5eee3678f8bfb37c7e3d6ae55": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBlockedBucket\",\n    block_public_access=s3.BlockPublicAccess.BLOCK_ALL\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBlockedBucket\", new BucketProps {\n    BlockPublicAccess = BlockPublicAccess.BLOCK_ALL\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyBlockedBucket\")\n        .blockPublicAccess(BlockPublicAccess.BLOCK_ALL)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBlockedBucket', {\n  blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 297
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.BlockPublicAccess",
        "@aws-cdk/aws-s3.BlockPublicAccess#BLOCK_ALL",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBlockedBucket', {\n  blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "2a0b0ca54b760b3a0fe3e773bcdb1ae321695817ab0c05c3ff3a1b90e7f54281"
    },
    "f203e2b3cdc70bfdd14e7fa086c0328295d73df05aec6e124fdcb85665cd9468": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBlockedBucket\",\n    block_public_access=s3.BlockPublicAccess.BLOCK_ACLS\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBlockedBucket\", new BucketProps {\n    BlockPublicAccess = BlockPublicAccess.BLOCK_ACLS\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyBlockedBucket\")\n        .blockPublicAccess(BlockPublicAccess.BLOCK_ACLS)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBlockedBucket', {\n  blockPublicAccess: s3.BlockPublicAccess.BLOCK_ACLS,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 305
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.BlockPublicAccess",
        "@aws-cdk/aws-s3.BlockPublicAccess#BLOCK_ACLS",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBlockedBucket', {\n  blockPublicAccess: s3.BlockPublicAccess.BLOCK_ACLS,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "7ada8a866c80b9b49b6cb4050db69ed5dbf18a3793db8d0cb1d7015d0cb89806"
    },
    "3b33e9a3410c0717d7faeb932c3735c6ebcff58e5c6cffcabc0dddc8c9e87aa5": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBlockedBucket\",\n    block_public_access=s3.BlockPublicAccess(block_public_policy=True)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBlockedBucket\", new BucketProps {\n    BlockPublicAccess = new BlockPublicAccess(new BlockPublicAccessOptions { BlockPublicPolicy = true })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyBlockedBucket\")\n        .blockPublicAccess(BlockPublicAccess.Builder.create().blockPublicPolicy(true).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBlockedBucket', {\n  blockPublicAccess: new s3.BlockPublicAccess({ blockPublicPolicy: true }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 313
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.BlockPublicAccess",
        "@aws-cdk/aws-s3.BlockPublicAccessOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBlockedBucket', {\n  blockPublicAccess: new s3.BlockPublicAccess({ blockPublicPolicy: true }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "106": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "e7d6fa8dd65070290b33bbe0537bbba6bc27eb037b015efebd5be37953a3bf12"
    },
    "3ec3c0d78960b28e4a144df7b79b669375f922a83b02fcd1e6f95eaf60a9b749": {
      "translations": {
        "python": {
          "source": "access_logs_bucket = s3.Bucket(self, \"AccessLogsBucket\")\n\nbucket = s3.Bucket(self, \"MyBucket\",\n    server_access_logs_bucket=access_logs_bucket\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket accessLogsBucket = new Bucket(this, \"AccessLogsBucket\");\n\nBucket bucket = new Bucket(this, \"MyBucket\", new BucketProps {\n    ServerAccessLogsBucket = accessLogsBucket\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket accessLogsBucket = new Bucket(this, \"AccessLogsBucket\");\n\nBucket bucket = Bucket.Builder.create(this, \"MyBucket\")\n        .serverAccessLogsBucket(accessLogsBucket)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const accessLogsBucket = new s3.Bucket(this, 'AccessLogsBucket');\n\nconst bucket = new s3.Bucket(this, 'MyBucket', {\n  serverAccessLogsBucket: accessLogsBucket,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 327
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst accessLogsBucket = new s3.Bucket(this, 'AccessLogsBucket');\n\nconst bucket = new s3.Bucket(this, 'MyBucket', {\n  serverAccessLogsBucket: accessLogsBucket,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "8837676dc71417a6d841266301f4d3d9f9070f6de6577a4638a6ecbefc30dcdd"
    },
    "8df0a19b9ad0338c137c9efc0d9250edfaab61be12ee9ab016cdcb378119a432": {
      "translations": {
        "python": {
          "source": "access_logs_bucket = s3.Bucket(self, \"AccessLogsBucket\")\n\nbucket = s3.Bucket(self, \"MyBucket\",\n    server_access_logs_bucket=access_logs_bucket,\n    server_access_logs_prefix=\"logs\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket accessLogsBucket = new Bucket(this, \"AccessLogsBucket\");\n\nBucket bucket = new Bucket(this, \"MyBucket\", new BucketProps {\n    ServerAccessLogsBucket = accessLogsBucket,\n    ServerAccessLogsPrefix = \"logs\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket accessLogsBucket = new Bucket(this, \"AccessLogsBucket\");\n\nBucket bucket = Bucket.Builder.create(this, \"MyBucket\")\n        .serverAccessLogsBucket(accessLogsBucket)\n        .serverAccessLogsPrefix(\"logs\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const accessLogsBucket = new s3.Bucket(this, 'AccessLogsBucket');\n\nconst bucket = new s3.Bucket(this, 'MyBucket', {\n  serverAccessLogsBucket: accessLogsBucket,\n  serverAccessLogsPrefix: 'logs',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 337
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst accessLogsBucket = new s3.Bucket(this, 'AccessLogsBucket');\n\nconst bucket = new s3.Bucket(this, 'MyBucket', {\n  serverAccessLogsBucket: accessLogsBucket,\n  serverAccessLogsPrefix: 'logs',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "8837676dc71417a6d841266301f4d3d9f9070f6de6577a4638a6ecbefc30dcdd"
    },
    "1c0f4c3f1e18c3b9e499b2ab37bb943b464d006c550727732262b2af0948dcc6": {
      "translations": {
        "python": {
          "source": "inventory_bucket = s3.Bucket(self, \"InventoryBucket\")\n\ndata_bucket = s3.Bucket(self, \"DataBucket\",\n    inventories=[s3.Inventory(\n        frequency=s3.InventoryFrequency.DAILY,\n        include_object_versions=s3.InventoryObjectVersion.CURRENT,\n        destination=s3.InventoryDestination(\n            bucket=inventory_bucket\n        )\n    ), s3.Inventory(\n        frequency=s3.InventoryFrequency.WEEKLY,\n        include_object_versions=s3.InventoryObjectVersion.ALL,\n        destination=s3.InventoryDestination(\n            bucket=inventory_bucket,\n            prefix=\"with-all-versions\"\n        )\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket inventoryBucket = new Bucket(this, \"InventoryBucket\");\n\nBucket dataBucket = new Bucket(this, \"DataBucket\", new BucketProps {\n    Inventories = new [] { new Inventory {\n        Frequency = InventoryFrequency.DAILY,\n        IncludeObjectVersions = InventoryObjectVersion.CURRENT,\n        Destination = new InventoryDestination {\n            Bucket = inventoryBucket\n        }\n    }, new Inventory {\n        Frequency = InventoryFrequency.WEEKLY,\n        IncludeObjectVersions = InventoryObjectVersion.ALL,\n        Destination = new InventoryDestination {\n            Bucket = inventoryBucket,\n            Prefix = \"with-all-versions\"\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket inventoryBucket = new Bucket(this, \"InventoryBucket\");\n\nBucket dataBucket = Bucket.Builder.create(this, \"DataBucket\")\n        .inventories(List.of(Inventory.builder()\n                .frequency(InventoryFrequency.DAILY)\n                .includeObjectVersions(InventoryObjectVersion.CURRENT)\n                .destination(InventoryDestination.builder()\n                        .bucket(inventoryBucket)\n                        .build())\n                .build(), Inventory.builder()\n                .frequency(InventoryFrequency.WEEKLY)\n                .includeObjectVersions(InventoryObjectVersion.ALL)\n                .destination(InventoryDestination.builder()\n                        .bucket(inventoryBucket)\n                        .prefix(\"with-all-versions\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const inventoryBucket = new s3.Bucket(this, 'InventoryBucket');\n\nconst dataBucket = new s3.Bucket(this, 'DataBucket', {\n  inventories: [\n    {\n      frequency: s3.InventoryFrequency.DAILY,\n      includeObjectVersions: s3.InventoryObjectVersion.CURRENT,\n      destination: {\n        bucket: inventoryBucket,\n      },\n    },\n    {\n      frequency: s3.InventoryFrequency.WEEKLY,\n      includeObjectVersions: s3.InventoryObjectVersion.ALL,\n      destination: {\n        bucket: inventoryBucket,\n        prefix: 'with-all-versions',\n      },\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 354
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-s3.InventoryDestination",
        "@aws-cdk/aws-s3.InventoryFrequency",
        "@aws-cdk/aws-s3.InventoryFrequency#DAILY",
        "@aws-cdk/aws-s3.InventoryFrequency#WEEKLY",
        "@aws-cdk/aws-s3.InventoryObjectVersion",
        "@aws-cdk/aws-s3.InventoryObjectVersion#ALL",
        "@aws-cdk/aws-s3.InventoryObjectVersion#CURRENT"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst inventoryBucket = new s3.Bucket(this, 'InventoryBucket');\n\nconst dataBucket = new s3.Bucket(this, 'DataBucket', {\n  inventories: [\n    {\n      frequency: s3.InventoryFrequency.DAILY,\n      includeObjectVersions: s3.InventoryObjectVersion.CURRENT,\n      destination: {\n        bucket: inventoryBucket,\n      },\n    },\n    {\n      frequency: s3.InventoryFrequency.WEEKLY,\n      includeObjectVersions: s3.InventoryObjectVersion.ALL,\n      destination: {\n        bucket: inventoryBucket,\n        prefix: 'with-all-versions',\n      },\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 30,
        "104": 2,
        "192": 1,
        "193": 5,
        "194": 10,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 10
      },
      "fqnsFingerprint": "51d990e6c078f9cd31ea4ee270d49c8c05e3ece3c76e4499931cb766b7d04b8d"
    },
    "dcb5fe207b669703f0cbc3a86d321dfde36b4f17973c085df6c9e0e044416d76": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyRedirectedBucket\",\n    website_redirect=s3.RedirectTarget(host_name=\"www.example.com\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyRedirectedBucket\", new BucketProps {\n    WebsiteRedirect = new RedirectTarget { HostName = \"www.example.com\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyRedirectedBucket\")\n        .websiteRedirect(RedirectTarget.builder().hostName(\"www.example.com\").build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyRedirectedBucket', {\n  websiteRedirect: { hostName: 'www.example.com' },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 406
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.RedirectTarget"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyRedirectedBucket', {\n  websiteRedirect: { hostName: 'www.example.com' },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "cbf53dd3e86a39752ec4ea3432bf22fdb4d8d8392c88d93307dcdcfe3ca09e53"
    },
    "9f72ba98ab02b135bb0e7a392ef1b0898911a4127190ac988ecb5b2691a6fca3": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyRedirectedBucket\",\n    website_routing_rules=[s3.RoutingRule(\n        host_name=\"www.example.com\",\n        http_redirect_code=\"302\",\n        protocol=s3.RedirectProtocol.HTTPS,\n        replace_key=s3.ReplaceKey.prefix_with(\"test/\"),\n        condition=s3.RoutingRuleCondition(\n            http_error_code_returned_equals=\"200\",\n            key_prefix_equals=\"prefix\"\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyRedirectedBucket\", new BucketProps {\n    WebsiteRoutingRules = new [] { new RoutingRule {\n        HostName = \"www.example.com\",\n        HttpRedirectCode = \"302\",\n        Protocol = RedirectProtocol.HTTPS,\n        ReplaceKey = ReplaceKey.PrefixWith(\"test/\"),\n        Condition = new RoutingRuleCondition {\n            HttpErrorCodeReturnedEquals = \"200\",\n            KeyPrefixEquals = \"prefix\"\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyRedirectedBucket\")\n        .websiteRoutingRules(List.of(RoutingRule.builder()\n                .hostName(\"www.example.com\")\n                .httpRedirectCode(\"302\")\n                .protocol(RedirectProtocol.HTTPS)\n                .replaceKey(ReplaceKey.prefixWith(\"test/\"))\n                .condition(RoutingRuleCondition.builder()\n                        .httpErrorCodeReturnedEquals(\"200\")\n                        .keyPrefixEquals(\"prefix\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyRedirectedBucket', {\n  websiteRoutingRules: [{\n    hostName: 'www.example.com',\n    httpRedirectCode: '302',\n    protocol: s3.RedirectProtocol.HTTPS,\n    replaceKey: s3.ReplaceKey.prefixWith('test/'),\n    condition: {\n      httpErrorCodeReturnedEquals: '200',\n      keyPrefixEquals: 'prefix',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 416
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.RedirectProtocol",
        "@aws-cdk/aws-s3.RedirectProtocol#HTTPS",
        "@aws-cdk/aws-s3.ReplaceKey",
        "@aws-cdk/aws-s3.ReplaceKey#prefixWith",
        "@aws-cdk/aws-s3.RoutingRuleCondition"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyRedirectedBucket', {\n  websiteRoutingRules: [{\n    hostName: 'www.example.com',\n    httpRedirectCode: '302',\n    protocol: s3.RedirectProtocol.HTTPS,\n    replaceKey: s3.ReplaceKey.prefixWith('test/'),\n    condition: {\n      httpErrorCodeReturnedEquals: '200',\n      keyPrefixEquals: 'prefix',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "43a9a39f4ef516ec09ef55e4674855ce0a71fc60634c12c1c84e5e82f8cb0be2"
    },
    "9a1df4b7688e0132464b9905a11808a7f3b012e21faeccb0a01d7eb6fff434ff": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\")\nbucket.url_for_object(\"objectname\") # Path-Style URL\nbucket.virtual_hosted_url_for_object(\"objectname\") # Virtual Hosted-Style URL\nbucket.virtual_hosted_url_for_object(\"objectname\", regional=False)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nbucket.UrlForObject(\"objectname\"); // Path-Style URL\nbucket.VirtualHostedUrlForObject(\"objectname\"); // Virtual Hosted-Style URL\nbucket.VirtualHostedUrlForObject(\"objectname\", new VirtualHostedStyleUrlOptions { Regional = false });",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nbucket.urlForObject(\"objectname\"); // Path-Style URL\nbucket.virtualHostedUrlForObject(\"objectname\"); // Virtual Hosted-Style URL\nbucket.virtualHostedUrlForObject(\"objectname\", VirtualHostedStyleUrlOptions.builder().regional(false).build());",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket');\nbucket.urlForObject('objectname'); // Path-Style URL\nbucket.virtualHostedUrlForObject('objectname'); // Virtual Hosted-Style URL\nbucket.virtualHostedUrlForObject('objectname', { regional: false }); // Virtual Hosted-Style URL but non-regional",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 447
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#urlForObject",
        "@aws-cdk/aws-s3.BucketBase#virtualHostedUrlForObject",
        "@aws-cdk/aws-s3.VirtualHostedStyleUrlOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket');\nbucket.urlForObject('objectname'); // Path-Style URL\nbucket.virtualHostedUrlForObject('objectname'); // Virtual Hosted-Style URL\nbucket.virtualHostedUrlForObject('objectname', { regional: false });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "1000b123c64ba0086de8fd1d329cecdcbdb9daf23344ad8bb7101c3785b99618"
    },
    "0e24c5fc757895589f565befbdbcdd9754a3d2791f201e0f9dfde5d672fa1af1": {
      "translations": {
        "python": {
          "source": "s3.Bucket(self, \"MyBucket\",\n    object_ownership=s3.ObjectOwnership.OBJECT_WRITER\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Bucket(this, \"MyBucket\", new BucketProps {\n    ObjectOwnership = ObjectOwnership.OBJECT_WRITER\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket.Builder.create(this, \"MyBucket\")\n        .objectOwnership(ObjectOwnership.OBJECT_WRITER)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new s3.Bucket(this, 'MyBucket', {\n  objectOwnership: s3.ObjectOwnership.OBJECT_WRITER,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 464
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.ObjectOwnership",
        "@aws-cdk/aws-s3.ObjectOwnership#OBJECT_WRITER"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew s3.Bucket(this, 'MyBucket', {\n  objectOwnership: s3.ObjectOwnership.OBJECT_WRITER,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "121bd7894da3efa9c930fb65673b543bc3624345a14180e1df796a317b61b664"
    },
    "fdba0a3b1fc77528ad1e9a3e8448101552f1e9266e444af52380ba99d4096ee4": {
      "translations": {
        "python": {
          "source": "s3.Bucket(self, \"MyBucket\",\n    object_ownership=s3.ObjectOwnership.BUCKET_OWNER_PREFERRED\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Bucket(this, \"MyBucket\", new BucketProps {\n    ObjectOwnership = ObjectOwnership.BUCKET_OWNER_PREFERRED\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket.Builder.create(this, \"MyBucket\")\n        .objectOwnership(ObjectOwnership.BUCKET_OWNER_PREFERRED)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new s3.Bucket(this, 'MyBucket', {\n  objectOwnership: s3.ObjectOwnership.BUCKET_OWNER_PREFERRED,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 474
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.ObjectOwnership",
        "@aws-cdk/aws-s3.ObjectOwnership#BUCKET_OWNER_PREFERRED"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew s3.Bucket(this, 'MyBucket', {\n  objectOwnership: s3.ObjectOwnership.BUCKET_OWNER_PREFERRED,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "434857bd1b1cf16dc7b6500af70af30470a2d95d7fadde8f46f5fab1cde80ccf"
    },
    "8545528d8a1dcd10784c7b6a5ee34263573542ed838560c2a193d9fc5ccd6fff": {
      "translations": {
        "python": {
          "source": "s3.Bucket(self, \"MyBucket\",\n    object_ownership=s3.ObjectOwnership.BUCKET_OWNER_ENFORCED\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Bucket(this, \"MyBucket\", new BucketProps {\n    ObjectOwnership = ObjectOwnership.BUCKET_OWNER_ENFORCED\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket.Builder.create(this, \"MyBucket\")\n        .objectOwnership(ObjectOwnership.BUCKET_OWNER_ENFORCED)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new s3.Bucket(this, 'MyBucket', {\n  objectOwnership: s3.ObjectOwnership.BUCKET_OWNER_ENFORCED,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 484
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.ObjectOwnership",
        "@aws-cdk/aws-s3.ObjectOwnership#BUCKET_OWNER_ENFORCED"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew s3.Bucket(this, 'MyBucket', {\n  objectOwnership: s3.ObjectOwnership.BUCKET_OWNER_ENFORCED,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "757b8b6d3f73c8ecd7d2ad9265646b07e77c76922da4801763d0608328048c27"
    },
    "dc016d3a953365ca00f3ca1fff79017d34171895ba09ba2bd033ccde8fc0c438": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyTempFileBucket\",\n    removal_policy=cdk.RemovalPolicy.DESTROY,\n    auto_delete_objects=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyTempFileBucket\", new BucketProps {\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    AutoDeleteObjects = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyTempFileBucket\")\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .autoDeleteObjects(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyTempFileBucket', {\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  autoDeleteObjects: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 501
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyTempFileBucket', {\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  autoDeleteObjects: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "6972e16859a39893bb52a3f92da4e0484e835b367b182c21d43193190d641c6c"
    },
    "144bee8096cf07effa57507a2615bc0c053a5da95c62a79eaf176e371e985a80": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\",\n    transfer_acceleration=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\", new BucketProps {\n    TransferAcceleration = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyBucket\")\n        .transferAcceleration(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket', {\n  transferAcceleration: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 517
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket', {\n  transferAcceleration: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "15f6ff45d2d5958143c9ff51761c9dccbb546fe9667501a2deab46d85b946cbc"
    },
    "455b8793148524aa427c5c31141b5be703ff031637f9b11c110b65541297e321": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\",\n    transfer_acceleration=True\n)\nbucket.transfer_acceleration_url_for_object(\"objectname\")",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\", new BucketProps {\n    TransferAcceleration = true\n});\nbucket.TransferAccelerationUrlForObject(\"objectname\");",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyBucket\")\n        .transferAcceleration(true)\n        .build();\nbucket.transferAccelerationUrlForObject(\"objectname\");",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket', {\n  transferAcceleration: true,\n});\nbucket.transferAccelerationUrlForObject('objectname');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-s3"
        },
        "field": {
          "field": "markdown",
          "line": 525
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#transferAccelerationUrlForObject",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket', {\n  transferAcceleration: true,\n});\nbucket.transferAccelerationUrlForObject('objectname');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "ebf80da761ff91e0f4b217c175569f134a5ad85432da153c4fc700a6891eea57"
    },
    "d88688cb43478674044c1c3dd244b2cdc5078fae3d84334b715c5491145be8b1": {
      "translations": {
        "python": {
          "source": "# my_lambda is of type Function\n\nbucket = s3.Bucket(self, \"MyBucket\")\nbucket.add_event_notification(s3.EventType.OBJECT_CREATED, s3n.LambdaDestination(my_lambda), prefix=\"home/myusername/*\")",
          "version": "1"
        },
        "csharp": {
          "source": "Function myLambda;\n\nBucket bucket = new Bucket(this, \"MyBucket\");\nbucket.AddEventNotification(EventType.OBJECT_CREATED, new LambdaDestination(myLambda), new NotificationKeyFilter { Prefix = \"home/myusername/*\" });",
          "version": "1"
        },
        "java": {
          "source": "Function myLambda;\n\nBucket bucket = new Bucket(this, \"MyBucket\");\nbucket.addEventNotification(EventType.OBJECT_CREATED, new LambdaDestination(myLambda), NotificationKeyFilter.builder().prefix(\"home/myusername/*\").build());",
          "version": "1"
        },
        "$": {
          "source": "   declare const myLambda: lambda.Function;\n   const bucket = new s3.Bucket(this, 'MyBucket');\n   bucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.LambdaDestination(myLambda), {prefix: 'home/myusername/*'});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-s3.BucketBase",
          "memberName": "addEventNotification"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-s3-notifications.LambdaDestination",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#addEventNotification",
        "@aws-cdk/aws-s3.EventType",
        "@aws-cdk/aws-s3.EventType#OBJECT_CREATED",
        "@aws-cdk/aws-s3.IBucketNotificationDestination",
        "@aws-cdk/aws-s3.NotificationKeyFilter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n   declare const myLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n   const bucket = new s3.Bucket(this, 'MyBucket');\n   bucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.LambdaDestination(myLambda), {prefix: 'home/myusername/*'});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "51ee7bb9d8a84ccd4468d524742368f676688c0ff52d7354fe9180c9d5f140ff"
    },
    "5cc213ea77bcb79dce3a840c8d0b613fc00fad7aa955c25f2744529adb60ac35": {
      "translations": {
        "python": {
          "source": "# my_lambda is of type Function\n\nbucket = s3.Bucket(self, \"MyBucket\")\nbucket.add_event_notification(s3.EventType.OBJECT_CREATED, s3n.LambdaDestination(my_lambda), prefix=\"home/myusername/*\")",
          "version": "1"
        },
        "csharp": {
          "source": "Function myLambda;\n\nBucket bucket = new Bucket(this, \"MyBucket\");\nbucket.AddEventNotification(EventType.OBJECT_CREATED, new LambdaDestination(myLambda), new NotificationKeyFilter { Prefix = \"home/myusername/*\" });",
          "version": "1"
        },
        "java": {
          "source": "Function myLambda;\n\nBucket bucket = new Bucket(this, \"MyBucket\");\nbucket.addEventNotification(EventType.OBJECT_CREATED, new LambdaDestination(myLambda), NotificationKeyFilter.builder().prefix(\"home/myusername/*\").build());",
          "version": "1"
        },
        "$": {
          "source": "   declare const myLambda: lambda.Function;\n   const bucket = new s3.Bucket(this, 'MyBucket');\n   bucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.LambdaDestination(myLambda), {prefix: 'home/myusername/*'})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-s3.IBucket",
          "memberName": "addEventNotification"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-s3-notifications.LambdaDestination",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#addEventNotification",
        "@aws-cdk/aws-s3.EventType",
        "@aws-cdk/aws-s3.EventType#OBJECT_CREATED",
        "@aws-cdk/aws-s3.IBucketNotificationDestination",
        "@aws-cdk/aws-s3.NotificationKeyFilter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n   declare const myLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n   const bucket = new s3.Bucket(this, 'MyBucket');\n   bucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.LambdaDestination(myLambda), {prefix: 'home/myusername/*'})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "51ee7bb9d8a84ccd4468d524742368f676688c0ff52d7354fe9180c9d5f140ff"
    },
    "b0c69834eaffdaea4b005d4b73634b075fee7fd3dc7f0e5211b3a01c5bcb0478": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBlockedBucket\",\n    block_public_access=s3.BlockPublicAccess.BLOCK_ALL\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBlockedBucket\", new BucketProps {\n    BlockPublicAccess = BlockPublicAccess.BLOCK_ALL\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyBlockedBucket\")\n        .blockPublicAccess(BlockPublicAccess.BLOCK_ALL)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBlockedBucket', {\n  blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.BlockPublicAccess"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.BlockPublicAccess",
        "@aws-cdk/aws-s3.BlockPublicAccess#BLOCK_ALL",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBlockedBucket', {\n  blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "2a0b0ca54b760b3a0fe3e773bcdb1ae321695817ab0c05c3ff3a1b90e7f54281"
    },
    "1cad386cd3026dcb4e94aaf4d7814bf66c0c776a4f25fb4f4c97b822fdd0900d": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBlockedBucket\",\n    block_public_access=s3.BlockPublicAccess(block_public_policy=True)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBlockedBucket\", new BucketProps {\n    BlockPublicAccess = new BlockPublicAccess(new BlockPublicAccessOptions { BlockPublicPolicy = true })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyBlockedBucket\")\n        .blockPublicAccess(BlockPublicAccess.Builder.create().blockPublicPolicy(true).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBlockedBucket', {\n  blockPublicAccess: new s3.BlockPublicAccess({ blockPublicPolicy: true }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.BlockPublicAccessOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.BlockPublicAccess",
        "@aws-cdk/aws-s3.BlockPublicAccessOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBlockedBucket', {\n  blockPublicAccess: new s3.BlockPublicAccess({ blockPublicPolicy: true }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "106": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "e7d6fa8dd65070290b33bbe0537bbba6bc27eb037b015efebd5be37953a3bf12"
    },
    "fed0af595847160093dce79d6535a22af382fc2e4ccfb88b94659e38fec914ad": {
      "translations": {
        "python": {
          "source": "# ecr_repository is of type Repository\n\n\ncodebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.WindowsBuildImage.from_ecr_repository(ecr_repository, \"v1.0\", codebuild.WindowsImageType.SERVER_2019),\n        # optional certificate to include in the build image\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=s3.Bucket.from_bucket_name(self, \"Bucket\", \"my-bucket\"),\n            object_key=\"path/to/cert.pem\"\n        )\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Repository ecrRepository;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = WindowsBuildImage.FromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019),\n        // optional certificate to include in the build image\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = Bucket.FromBucketName(this, \"Bucket\", \"my-bucket\"),\n            ObjectKey = \"path/to/cert.pem\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository ecrRepository;\n\n\nProject.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(WindowsBuildImage.fromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019))\n                // optional certificate to include in the build image\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(Bucket.fromBucketName(this, \"Bucket\", \"my-bucket\"))\n                        .objectKey(\"path/to/cert.pem\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const ecrRepository: ecr.Repository;\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.Bucket"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.WindowsBuildImage",
        "@aws-cdk/aws-codebuild.WindowsBuildImage#fromEcrRepository",
        "@aws-cdk/aws-codebuild.WindowsImageType",
        "@aws-cdk/aws-codebuild.WindowsImageType#SERVER_2019",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const ecrRepository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "47315ac14fe1c6423e12825de436c1879c21f8c0ff1de51eb20081c8419b8aee"
    },
    "02a0548dea63e07b7d48b4b2ed91128801c96056e8fefa738a4c16f2724439e5": {
      "translations": {
        "python": {
          "source": "# my_lambda is of type Function\n\nbucket = s3.Bucket.from_bucket_attributes(self, \"ImportedBucket\",\n    bucket_arn=\"arn:aws:s3:::my-bucket\"\n)\n\n# now you can just call methods on the bucket\nbucket.add_event_notification(s3.EventType.OBJECT_CREATED, s3n.LambdaDestination(my_lambda), prefix=\"home/myusername/*\")",
          "version": "1"
        },
        "csharp": {
          "source": "Function myLambda;\n\nIBucket bucket = Bucket.FromBucketAttributes(this, \"ImportedBucket\", new BucketAttributes {\n    BucketArn = \"arn:aws:s3:::my-bucket\"\n});\n\n// now you can just call methods on the bucket\nbucket.AddEventNotification(EventType.OBJECT_CREATED, new LambdaDestination(myLambda), new NotificationKeyFilter { Prefix = \"home/myusername/*\" });",
          "version": "1"
        },
        "java": {
          "source": "Function myLambda;\n\nIBucket bucket = Bucket.fromBucketAttributes(this, \"ImportedBucket\", BucketAttributes.builder()\n        .bucketArn(\"arn:aws:s3:::my-bucket\")\n        .build());\n\n// now you can just call methods on the bucket\nbucket.addEventNotification(EventType.OBJECT_CREATED, new LambdaDestination(myLambda), NotificationKeyFilter.builder().prefix(\"home/myusername/*\").build());",
          "version": "1"
        },
        "$": {
          "source": "declare const myLambda: lambda.Function;\nconst bucket = s3.Bucket.fromBucketAttributes(this, 'ImportedBucket', {\n  bucketArn: 'arn:aws:s3:::my-bucket',\n});\n\n// now you can just call methods on the bucket\nbucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.LambdaDestination(myLambda), {prefix: 'home/myusername/*'});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.BucketAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-s3-notifications.LambdaDestination",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketAttributes",
        "@aws-cdk/aws-s3.BucketAttributes",
        "@aws-cdk/aws-s3.EventType",
        "@aws-cdk/aws-s3.EventType#OBJECT_CREATED",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-s3.IBucket#addEventNotification",
        "@aws-cdk/aws-s3.IBucketNotificationDestination",
        "@aws-cdk/aws-s3.NotificationKeyFilter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst bucket = s3.Bucket.fromBucketAttributes(this, 'ImportedBucket', {\n  bucketArn: 'arn:aws:s3:::my-bucket',\n});\n\n// now you can just call methods on the bucket\nbucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.LambdaDestination(myLambda), {prefix: 'home/myusername/*'});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ae85f30ec13a97b2a5c88d6ba477368e5d0a0eba2054189063c3d9cc4bcfc290"
    },
    "0d6ad90f8b8fd904bff48c044500e89d62a7897b72dcc7df84bffd914dd44175": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyEncryptedBucket\",\n    encryption=s3.BucketEncryption.KMS\n)\n\n# you can access the encryption key:\nassert(bucket.encryption_key instanceof kms.Key)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyEncryptedBucket\", new BucketProps {\n    Encryption = BucketEncryption.KMS\n});\n\n// you can access the encryption key:\nAssert(bucket.EncryptionKey instanceof Key);",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyEncryptedBucket\")\n        .encryption(BucketEncryption.KMS)\n        .build();\n\n// you can access the encryption key:\nassert(bucket.getEncryptionKey() instanceof Key);",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyEncryptedBucket', {\n  encryption: s3.BucketEncryption.KMS,\n});\n\n// you can access the encryption key:\nassert(bucket.encryptionKey instanceof kms.Key);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.BucketEncryption"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#encryptionKey",
        "@aws-cdk/aws-s3.BucketEncryption",
        "@aws-cdk/aws-s3.BucketEncryption#KMS",
        "@aws-cdk/aws-s3.BucketProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyEncryptedBucket', {\n  encryption: s3.BucketEncryption.KMS,\n});\n\n// you can access the encryption key:\nassert(bucket.encryptionKey instanceof kms.Key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "98": 1,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "209": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "d7498cf337ba580efd541885dce2aad62d2cb5e3e72742bf18ffbc7c85b293ab"
    },
    "bd1d3aee2484f419c215c5bfb91e17b91cae7ffa73179ece17af93d1ea11cb29": {
      "translations": {
        "python": {
          "source": "inventory_bucket = s3.Bucket(self, \"InventoryBucket\")\n\ndata_bucket = s3.Bucket(self, \"DataBucket\",\n    inventories=[s3.Inventory(\n        frequency=s3.InventoryFrequency.DAILY,\n        include_object_versions=s3.InventoryObjectVersion.CURRENT,\n        destination=s3.InventoryDestination(\n            bucket=inventory_bucket\n        )\n    ), s3.Inventory(\n        frequency=s3.InventoryFrequency.WEEKLY,\n        include_object_versions=s3.InventoryObjectVersion.ALL,\n        destination=s3.InventoryDestination(\n            bucket=inventory_bucket,\n            prefix=\"with-all-versions\"\n        )\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket inventoryBucket = new Bucket(this, \"InventoryBucket\");\n\nBucket dataBucket = new Bucket(this, \"DataBucket\", new BucketProps {\n    Inventories = new [] { new Inventory {\n        Frequency = InventoryFrequency.DAILY,\n        IncludeObjectVersions = InventoryObjectVersion.CURRENT,\n        Destination = new InventoryDestination {\n            Bucket = inventoryBucket\n        }\n    }, new Inventory {\n        Frequency = InventoryFrequency.WEEKLY,\n        IncludeObjectVersions = InventoryObjectVersion.ALL,\n        Destination = new InventoryDestination {\n            Bucket = inventoryBucket,\n            Prefix = \"with-all-versions\"\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket inventoryBucket = new Bucket(this, \"InventoryBucket\");\n\nBucket dataBucket = Bucket.Builder.create(this, \"DataBucket\")\n        .inventories(List.of(Inventory.builder()\n                .frequency(InventoryFrequency.DAILY)\n                .includeObjectVersions(InventoryObjectVersion.CURRENT)\n                .destination(InventoryDestination.builder()\n                        .bucket(inventoryBucket)\n                        .build())\n                .build(), Inventory.builder()\n                .frequency(InventoryFrequency.WEEKLY)\n                .includeObjectVersions(InventoryObjectVersion.ALL)\n                .destination(InventoryDestination.builder()\n                        .bucket(inventoryBucket)\n                        .prefix(\"with-all-versions\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const inventoryBucket = new s3.Bucket(this, 'InventoryBucket');\n\nconst dataBucket = new s3.Bucket(this, 'DataBucket', {\n  inventories: [\n    {\n      frequency: s3.InventoryFrequency.DAILY,\n      includeObjectVersions: s3.InventoryObjectVersion.CURRENT,\n      destination: {\n        bucket: inventoryBucket,\n      },\n    },\n    {\n      frequency: s3.InventoryFrequency.WEEKLY,\n      includeObjectVersions: s3.InventoryObjectVersion.ALL,\n      destination: {\n        bucket: inventoryBucket,\n        prefix: 'with-all-versions',\n      },\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.BucketProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-s3.InventoryDestination",
        "@aws-cdk/aws-s3.InventoryFrequency",
        "@aws-cdk/aws-s3.InventoryFrequency#DAILY",
        "@aws-cdk/aws-s3.InventoryFrequency#WEEKLY",
        "@aws-cdk/aws-s3.InventoryObjectVersion",
        "@aws-cdk/aws-s3.InventoryObjectVersion#ALL",
        "@aws-cdk/aws-s3.InventoryObjectVersion#CURRENT"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst inventoryBucket = new s3.Bucket(this, 'InventoryBucket');\n\nconst dataBucket = new s3.Bucket(this, 'DataBucket', {\n  inventories: [\n    {\n      frequency: s3.InventoryFrequency.DAILY,\n      includeObjectVersions: s3.InventoryObjectVersion.CURRENT,\n      destination: {\n        bucket: inventoryBucket,\n      },\n    },\n    {\n      frequency: s3.InventoryFrequency.WEEKLY,\n      includeObjectVersions: s3.InventoryObjectVersion.ALL,\n      destination: {\n        bucket: inventoryBucket,\n        prefix: 'with-all-versions',\n      },\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 30,
        "104": 2,
        "192": 1,
        "193": 5,
        "194": 10,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 10
      },
      "fqnsFingerprint": "51d990e6c078f9cd31ea4ee270d49c8c05e3ece3c76e4499931cb766b7d04b8d"
    },
    "7eaa1927ee66da20f1560a62dcba995af86891941c12a2c3f4523120b48f6a09": {
      "translations": {
        "python": {
          "source": "# cfn_template is of type CfnInclude\n\ncfn_bucket = cfn_template.get_resource(\"Bucket\")\n\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.AnyPrincipal()\n)\nrole.add_to_policy(iam.PolicyStatement(\n    actions=[\"s3:*\"],\n    resources=[cfn_bucket.attr_arn]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "CfnInclude cfnTemplate;\n\nCfnBucket cfnBucket = (CfnBucket)cfnTemplate.GetResource(\"Bucket\");\n\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new AnyPrincipal()\n});\nrole.AddToPolicy(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"s3:*\" },\n    Resources = new [] { cfnBucket.AttrArn }\n}));",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude cfnTemplate;\n\nCfnBucket cfnBucket = (CfnBucket)cfnTemplate.getResource(\"Bucket\");\n\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new AnyPrincipal())\n        .build();\nrole.addToPolicy(PolicyStatement.Builder.create()\n        .actions(List.of(\"s3:*\"))\n        .resources(List.of(cfnBucket.getAttrArn()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cfnTemplate: cfn_inc.CfnInclude;\nconst cfnBucket = cfnTemplate.getResource('Bucket') as s3.CfnBucket;\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.AnyPrincipal(),\n});\nrole.addToPolicy(new iam.PolicyStatement({\n  actions: ['s3:*'],\n  resources: [cfnBucket.attrArn],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.CfnBucket"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#addToPolicy",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-s3.CfnBucket",
        "@aws-cdk/aws-s3.CfnBucket#attrArn",
        "@aws-cdk/cloudformation-include.CfnInclude#getResource"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cfnTemplate: cfn_inc.CfnInclude;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as core from '@aws-cdk/core';\nimport * as path from 'path';\nimport * as cfn_inc from '@aws-cdk/cloudformation-include';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cfnBucket = cfnTemplate.getResource('Bucket') as s3.CfnBucket;\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.AnyPrincipal(),\n});\nrole.addToPolicy(new iam.PolicyStatement({\n  actions: ['s3:*'],\n  resources: [cfnBucket.attrArn],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 3,
        "217": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "398ea9ff6a976b288bcb714e5d543992f6e46890e66e3576339eaed3ba1b09ca"
    },
    "7d40a5be00b45be6cf0b004a273024dd390059ecb0dc5408b4ee29ab6d1fa135": {
      "translations": {
        "python": {
          "source": "raw_bucket = s3.CfnBucket(self, \"Bucket\")\n# -or-\nraw_bucket_alt = my_bucket.node.default_child\n\n# then\nraw_bucket.cfn_options.condition = CfnCondition(self, \"EnableBucket\")\nraw_bucket.cfn_options.metadata = {\n    \"metadata_key\": \"MetadataValue\"\n}",
          "version": "1"
        },
        "csharp": {
          "source": "CfnBucket rawBucket = new CfnBucket(this, \"Bucket\", new CfnBucketProps { });\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.Node.DefaultChild;\n\n// then\nrawBucket.CfnOptions.Condition = new CfnCondition(this, \"EnableBucket\", new CfnConditionProps { });\nrawBucket.CfnOptions.Metadata = new Dictionary<string, object> {\n    { \"metadataKey\", \"MetadataValue\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "CfnBucket rawBucket = CfnBucket.Builder.create(this, \"Bucket\").build();\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.getNode().getDefaultChild();\n\n// then\nrawBucket.getCfnOptions().getCondition() = CfnCondition.Builder.create(this, \"EnableBucket\").build();\nrawBucket.getCfnOptions().getMetadata() = Map.of(\n        \"metadataKey\", \"MetadataValue\");",
          "version": "1"
        },
        "$": {
          "source": "const rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.CfnBucketProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.CfnBucket",
        "@aws-cdk/aws-s3.CfnBucketProps",
        "@aws-cdk/core.CfnCondition",
        "@aws-cdk/core.CfnConditionProps",
        "@aws-cdk/core.CfnResource#cfnOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.ICfnResourceOptions#condition",
        "@aws-cdk/core.ICfnResourceOptions#metadata",
        "@aws-cdk/core.IConstruct#node"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "62": 2,
        "75": 17,
        "104": 2,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "197": 2,
        "209": 2,
        "217": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "6f32ba0d2347add5195e6ba699a4644500ab4881627f0b9d39eebbc4b50d2466"
    },
    "d25135a362e595abbeca70b13dd66ff851a0637cb0bbd9ce27f0d3c680862416": {
      "translations": {
        "python": {
          "source": "# my_queue is of type Queue\n\nbucket = s3.Bucket(self, \"MyBucket\")\nbucket.add_event_notification(s3.EventType.OBJECT_REMOVED,\n    s3n.SqsDestination(my_queue), prefix=\"foo/\", suffix=\".jpg\")",
          "version": "1"
        },
        "csharp": {
          "source": "Queue myQueue;\n\nBucket bucket = new Bucket(this, \"MyBucket\");\nbucket.AddEventNotification(EventType.OBJECT_REMOVED,\nnew SqsDestination(myQueue), new NotificationKeyFilter { Prefix = \"foo/\", Suffix = \".jpg\" });",
          "version": "1"
        },
        "java": {
          "source": "Queue myQueue;\n\nBucket bucket = new Bucket(this, \"MyBucket\");\nbucket.addEventNotification(EventType.OBJECT_REMOVED,\nnew SqsDestination(myQueue), NotificationKeyFilter.builder().prefix(\"foo/\").suffix(\".jpg\").build());",
          "version": "1"
        },
        "$": {
          "source": "declare const myQueue: sqs.Queue;\nconst bucket = new s3.Bucket(this, 'MyBucket');\nbucket.addEventNotification(s3.EventType.OBJECT_REMOVED,\n  new s3n.SqsDestination(myQueue),\n  { prefix: 'foo/', suffix: '.jpg' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.EventType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-notifications.SqsDestination",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#addEventNotification",
        "@aws-cdk/aws-s3.EventType",
        "@aws-cdk/aws-s3.EventType#OBJECT_REMOVED",
        "@aws-cdk/aws-s3.IBucketNotificationDestination",
        "@aws-cdk/aws-s3.NotificationKeyFilter",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myQueue: sqs.Queue;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst bucket = new s3.Bucket(this, 'MyBucket');\nbucket.addEventNotification(s3.EventType.OBJECT_REMOVED,\n  new s3n.SqsDestination(myQueue),\n  { prefix: 'foo/', suffix: '.jpg' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3d66e95fd4e874bbc111c5e4eb1a425657d087e37cb4ce363cfdfdd6e858d068"
    },
    "81b3cf62686784b8ae32f1a438bbb778a908ad8cc9cf6e4831342605b8fcef83": {
      "translations": {
        "python": {
          "source": "inventory_bucket = s3.Bucket(self, \"InventoryBucket\")\n\ndata_bucket = s3.Bucket(self, \"DataBucket\",\n    inventories=[s3.Inventory(\n        frequency=s3.InventoryFrequency.DAILY,\n        include_object_versions=s3.InventoryObjectVersion.CURRENT,\n        destination=s3.InventoryDestination(\n            bucket=inventory_bucket\n        )\n    ), s3.Inventory(\n        frequency=s3.InventoryFrequency.WEEKLY,\n        include_object_versions=s3.InventoryObjectVersion.ALL,\n        destination=s3.InventoryDestination(\n            bucket=inventory_bucket,\n            prefix=\"with-all-versions\"\n        )\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket inventoryBucket = new Bucket(this, \"InventoryBucket\");\n\nBucket dataBucket = new Bucket(this, \"DataBucket\", new BucketProps {\n    Inventories = new [] { new Inventory {\n        Frequency = InventoryFrequency.DAILY,\n        IncludeObjectVersions = InventoryObjectVersion.CURRENT,\n        Destination = new InventoryDestination {\n            Bucket = inventoryBucket\n        }\n    }, new Inventory {\n        Frequency = InventoryFrequency.WEEKLY,\n        IncludeObjectVersions = InventoryObjectVersion.ALL,\n        Destination = new InventoryDestination {\n            Bucket = inventoryBucket,\n            Prefix = \"with-all-versions\"\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket inventoryBucket = new Bucket(this, \"InventoryBucket\");\n\nBucket dataBucket = Bucket.Builder.create(this, \"DataBucket\")\n        .inventories(List.of(Inventory.builder()\n                .frequency(InventoryFrequency.DAILY)\n                .includeObjectVersions(InventoryObjectVersion.CURRENT)\n                .destination(InventoryDestination.builder()\n                        .bucket(inventoryBucket)\n                        .build())\n                .build(), Inventory.builder()\n                .frequency(InventoryFrequency.WEEKLY)\n                .includeObjectVersions(InventoryObjectVersion.ALL)\n                .destination(InventoryDestination.builder()\n                        .bucket(inventoryBucket)\n                        .prefix(\"with-all-versions\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const inventoryBucket = new s3.Bucket(this, 'InventoryBucket');\n\nconst dataBucket = new s3.Bucket(this, 'DataBucket', {\n  inventories: [\n    {\n      frequency: s3.InventoryFrequency.DAILY,\n      includeObjectVersions: s3.InventoryObjectVersion.CURRENT,\n      destination: {\n        bucket: inventoryBucket,\n      },\n    },\n    {\n      frequency: s3.InventoryFrequency.WEEKLY,\n      includeObjectVersions: s3.InventoryObjectVersion.ALL,\n      destination: {\n        bucket: inventoryBucket,\n        prefix: 'with-all-versions',\n      },\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.InventoryDestination"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-s3.InventoryDestination",
        "@aws-cdk/aws-s3.InventoryFrequency",
        "@aws-cdk/aws-s3.InventoryFrequency#DAILY",
        "@aws-cdk/aws-s3.InventoryFrequency#WEEKLY",
        "@aws-cdk/aws-s3.InventoryObjectVersion",
        "@aws-cdk/aws-s3.InventoryObjectVersion#ALL",
        "@aws-cdk/aws-s3.InventoryObjectVersion#CURRENT"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst inventoryBucket = new s3.Bucket(this, 'InventoryBucket');\n\nconst dataBucket = new s3.Bucket(this, 'DataBucket', {\n  inventories: [\n    {\n      frequency: s3.InventoryFrequency.DAILY,\n      includeObjectVersions: s3.InventoryObjectVersion.CURRENT,\n      destination: {\n        bucket: inventoryBucket,\n      },\n    },\n    {\n      frequency: s3.InventoryFrequency.WEEKLY,\n      includeObjectVersions: s3.InventoryObjectVersion.ALL,\n      destination: {\n        bucket: inventoryBucket,\n        prefix: 'with-all-versions',\n      },\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 30,
        "104": 2,
        "192": 1,
        "193": 5,
        "194": 10,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 10
      },
      "fqnsFingerprint": "51d990e6c078f9cd31ea4ee270d49c8c05e3ece3c76e4499931cb766b7d04b8d"
    },
    "bf1dbf75038acd40783f0bd5c8d75e1deadb3384d95e2781d447743e8b4f3e74": {
      "translations": {
        "python": {
          "source": "inventory_bucket = s3.Bucket(self, \"InventoryBucket\")\n\ndata_bucket = s3.Bucket(self, \"DataBucket\",\n    inventories=[s3.Inventory(\n        frequency=s3.InventoryFrequency.DAILY,\n        include_object_versions=s3.InventoryObjectVersion.CURRENT,\n        destination=s3.InventoryDestination(\n            bucket=inventory_bucket\n        )\n    ), s3.Inventory(\n        frequency=s3.InventoryFrequency.WEEKLY,\n        include_object_versions=s3.InventoryObjectVersion.ALL,\n        destination=s3.InventoryDestination(\n            bucket=inventory_bucket,\n            prefix=\"with-all-versions\"\n        )\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket inventoryBucket = new Bucket(this, \"InventoryBucket\");\n\nBucket dataBucket = new Bucket(this, \"DataBucket\", new BucketProps {\n    Inventories = new [] { new Inventory {\n        Frequency = InventoryFrequency.DAILY,\n        IncludeObjectVersions = InventoryObjectVersion.CURRENT,\n        Destination = new InventoryDestination {\n            Bucket = inventoryBucket\n        }\n    }, new Inventory {\n        Frequency = InventoryFrequency.WEEKLY,\n        IncludeObjectVersions = InventoryObjectVersion.ALL,\n        Destination = new InventoryDestination {\n            Bucket = inventoryBucket,\n            Prefix = \"with-all-versions\"\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket inventoryBucket = new Bucket(this, \"InventoryBucket\");\n\nBucket dataBucket = Bucket.Builder.create(this, \"DataBucket\")\n        .inventories(List.of(Inventory.builder()\n                .frequency(InventoryFrequency.DAILY)\n                .includeObjectVersions(InventoryObjectVersion.CURRENT)\n                .destination(InventoryDestination.builder()\n                        .bucket(inventoryBucket)\n                        .build())\n                .build(), Inventory.builder()\n                .frequency(InventoryFrequency.WEEKLY)\n                .includeObjectVersions(InventoryObjectVersion.ALL)\n                .destination(InventoryDestination.builder()\n                        .bucket(inventoryBucket)\n                        .prefix(\"with-all-versions\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const inventoryBucket = new s3.Bucket(this, 'InventoryBucket');\n\nconst dataBucket = new s3.Bucket(this, 'DataBucket', {\n  inventories: [\n    {\n      frequency: s3.InventoryFrequency.DAILY,\n      includeObjectVersions: s3.InventoryObjectVersion.CURRENT,\n      destination: {\n        bucket: inventoryBucket,\n      },\n    },\n    {\n      frequency: s3.InventoryFrequency.WEEKLY,\n      includeObjectVersions: s3.InventoryObjectVersion.ALL,\n      destination: {\n        bucket: inventoryBucket,\n        prefix: 'with-all-versions',\n      },\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.InventoryFrequency"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-s3.InventoryDestination",
        "@aws-cdk/aws-s3.InventoryFrequency",
        "@aws-cdk/aws-s3.InventoryFrequency#DAILY",
        "@aws-cdk/aws-s3.InventoryFrequency#WEEKLY",
        "@aws-cdk/aws-s3.InventoryObjectVersion",
        "@aws-cdk/aws-s3.InventoryObjectVersion#ALL",
        "@aws-cdk/aws-s3.InventoryObjectVersion#CURRENT"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst inventoryBucket = new s3.Bucket(this, 'InventoryBucket');\n\nconst dataBucket = new s3.Bucket(this, 'DataBucket', {\n  inventories: [\n    {\n      frequency: s3.InventoryFrequency.DAILY,\n      includeObjectVersions: s3.InventoryObjectVersion.CURRENT,\n      destination: {\n        bucket: inventoryBucket,\n      },\n    },\n    {\n      frequency: s3.InventoryFrequency.WEEKLY,\n      includeObjectVersions: s3.InventoryObjectVersion.ALL,\n      destination: {\n        bucket: inventoryBucket,\n        prefix: 'with-all-versions',\n      },\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 30,
        "104": 2,
        "192": 1,
        "193": 5,
        "194": 10,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 10
      },
      "fqnsFingerprint": "51d990e6c078f9cd31ea4ee270d49c8c05e3ece3c76e4499931cb766b7d04b8d"
    },
    "696ea489cf6ebe25396f8ecd217157c06a128daf5a99f934f63e587fb5070ce1": {
      "translations": {
        "python": {
          "source": "inventory_bucket = s3.Bucket(self, \"InventoryBucket\")\n\ndata_bucket = s3.Bucket(self, \"DataBucket\",\n    inventories=[s3.Inventory(\n        frequency=s3.InventoryFrequency.DAILY,\n        include_object_versions=s3.InventoryObjectVersion.CURRENT,\n        destination=s3.InventoryDestination(\n            bucket=inventory_bucket\n        )\n    ), s3.Inventory(\n        frequency=s3.InventoryFrequency.WEEKLY,\n        include_object_versions=s3.InventoryObjectVersion.ALL,\n        destination=s3.InventoryDestination(\n            bucket=inventory_bucket,\n            prefix=\"with-all-versions\"\n        )\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket inventoryBucket = new Bucket(this, \"InventoryBucket\");\n\nBucket dataBucket = new Bucket(this, \"DataBucket\", new BucketProps {\n    Inventories = new [] { new Inventory {\n        Frequency = InventoryFrequency.DAILY,\n        IncludeObjectVersions = InventoryObjectVersion.CURRENT,\n        Destination = new InventoryDestination {\n            Bucket = inventoryBucket\n        }\n    }, new Inventory {\n        Frequency = InventoryFrequency.WEEKLY,\n        IncludeObjectVersions = InventoryObjectVersion.ALL,\n        Destination = new InventoryDestination {\n            Bucket = inventoryBucket,\n            Prefix = \"with-all-versions\"\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket inventoryBucket = new Bucket(this, \"InventoryBucket\");\n\nBucket dataBucket = Bucket.Builder.create(this, \"DataBucket\")\n        .inventories(List.of(Inventory.builder()\n                .frequency(InventoryFrequency.DAILY)\n                .includeObjectVersions(InventoryObjectVersion.CURRENT)\n                .destination(InventoryDestination.builder()\n                        .bucket(inventoryBucket)\n                        .build())\n                .build(), Inventory.builder()\n                .frequency(InventoryFrequency.WEEKLY)\n                .includeObjectVersions(InventoryObjectVersion.ALL)\n                .destination(InventoryDestination.builder()\n                        .bucket(inventoryBucket)\n                        .prefix(\"with-all-versions\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const inventoryBucket = new s3.Bucket(this, 'InventoryBucket');\n\nconst dataBucket = new s3.Bucket(this, 'DataBucket', {\n  inventories: [\n    {\n      frequency: s3.InventoryFrequency.DAILY,\n      includeObjectVersions: s3.InventoryObjectVersion.CURRENT,\n      destination: {\n        bucket: inventoryBucket,\n      },\n    },\n    {\n      frequency: s3.InventoryFrequency.WEEKLY,\n      includeObjectVersions: s3.InventoryObjectVersion.ALL,\n      destination: {\n        bucket: inventoryBucket,\n        prefix: 'with-all-versions',\n      },\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.InventoryObjectVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-s3.InventoryDestination",
        "@aws-cdk/aws-s3.InventoryFrequency",
        "@aws-cdk/aws-s3.InventoryFrequency#DAILY",
        "@aws-cdk/aws-s3.InventoryFrequency#WEEKLY",
        "@aws-cdk/aws-s3.InventoryObjectVersion",
        "@aws-cdk/aws-s3.InventoryObjectVersion#ALL",
        "@aws-cdk/aws-s3.InventoryObjectVersion#CURRENT"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst inventoryBucket = new s3.Bucket(this, 'InventoryBucket');\n\nconst dataBucket = new s3.Bucket(this, 'DataBucket', {\n  inventories: [\n    {\n      frequency: s3.InventoryFrequency.DAILY,\n      includeObjectVersions: s3.InventoryObjectVersion.CURRENT,\n      destination: {\n        bucket: inventoryBucket,\n      },\n    },\n    {\n      frequency: s3.InventoryFrequency.WEEKLY,\n      includeObjectVersions: s3.InventoryObjectVersion.ALL,\n      destination: {\n        bucket: inventoryBucket,\n        prefix: 'with-all-versions',\n      },\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 30,
        "104": 2,
        "192": 1,
        "193": 5,
        "194": 10,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 10
      },
      "fqnsFingerprint": "51d990e6c078f9cd31ea4ee270d49c8c05e3ece3c76e4499931cb766b7d04b8d"
    },
    "66164ceb10a0bfececd8390825d557d2c56d4c19e9bbd1e985e79c1e86a95799": {
      "translations": {
        "python": {
          "source": "start_query_execution_job = tasks.AthenaStartQueryExecution(self, \"Athena Start Query\",\n    query_string=sfn.JsonPath.string_at(\"States.Format('select contacts where year={};', $.year)\"),\n    query_execution_context=tasks.QueryExecutionContext(\n        database_name=\"interactions\"\n    ),\n    result_configuration=tasks.ResultConfiguration(\n        encryption_configuration=tasks.EncryptionConfiguration(\n            encryption_option=tasks.EncryptionOption.S3_MANAGED\n        ),\n        output_location=s3.Location(\n            bucket_name=\"mybucket\",\n            object_key=\"myprefix\"\n        )\n    ),\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = new AthenaStartQueryExecution(this, \"Athena Start Query\", new AthenaStartQueryExecutionProps {\n    QueryString = JsonPath.StringAt(\"States.Format('select contacts where year={};', $.year)\"),\n    QueryExecutionContext = new QueryExecutionContext {\n        DatabaseName = \"interactions\"\n    },\n    ResultConfiguration = new ResultConfiguration {\n        EncryptionConfiguration = new EncryptionConfiguration {\n            EncryptionOption = EncryptionOption.S3_MANAGED\n        },\n        OutputLocation = new Location {\n            BucketName = \"mybucket\",\n            ObjectKey = \"myprefix\"\n        }\n    },\n    IntegrationPattern = IntegrationPattern.RUN_JOB\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = AthenaStartQueryExecution.Builder.create(this, \"Athena Start Query\")\n        .queryString(JsonPath.stringAt(\"States.Format('select contacts where year={};', $.year)\"))\n        .queryExecutionContext(QueryExecutionContext.builder()\n                .databaseName(\"interactions\")\n                .build())\n        .resultConfiguration(ResultConfiguration.builder()\n                .encryptionConfiguration(EncryptionConfiguration.builder()\n                        .encryptionOption(EncryptionOption.S3_MANAGED)\n                        .build())\n                .outputLocation(Location.builder()\n                        .bucketName(\"mybucket\")\n                        .objectKey(\"myprefix\")\n                        .build())\n                .build())\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.stringAt(\"States.Format('select contacts where year={};', $.year)\"),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.Location"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Location",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionConfiguration",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption#S3_MANAGED",
        "@aws-cdk/aws-stepfunctions-tasks.QueryExecutionContext",
        "@aws-cdk/aws-stepfunctions-tasks.ResultConfiguration",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.stringAt(\"States.Format('select contacts where year={};', $.year)\"),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 22,
        "104": 1,
        "193": 5,
        "194": 7,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "bb3f68921f5b22e974eb1641bc56b0ea544fe56c41ea62559a19227d55021220"
    },
    "ab6776e714163112e5cdd249d58abde19110fcb281fe5e33d741c8d80dc960fc": {
      "translations": {
        "python": {
          "source": "# my_queue is of type Queue\n\nbucket = s3.Bucket(self, \"MyBucket\")\nbucket.add_event_notification(s3.EventType.OBJECT_REMOVED,\n    s3n.SqsDestination(my_queue), prefix=\"foo/\", suffix=\".jpg\")",
          "version": "1"
        },
        "csharp": {
          "source": "Queue myQueue;\n\nBucket bucket = new Bucket(this, \"MyBucket\");\nbucket.AddEventNotification(EventType.OBJECT_REMOVED,\nnew SqsDestination(myQueue), new NotificationKeyFilter { Prefix = \"foo/\", Suffix = \".jpg\" });",
          "version": "1"
        },
        "java": {
          "source": "Queue myQueue;\n\nBucket bucket = new Bucket(this, \"MyBucket\");\nbucket.addEventNotification(EventType.OBJECT_REMOVED,\nnew SqsDestination(myQueue), NotificationKeyFilter.builder().prefix(\"foo/\").suffix(\".jpg\").build());",
          "version": "1"
        },
        "$": {
          "source": "declare const myQueue: sqs.Queue;\nconst bucket = new s3.Bucket(this, 'MyBucket');\nbucket.addEventNotification(s3.EventType.OBJECT_REMOVED,\n  new s3n.SqsDestination(myQueue),\n  { prefix: 'foo/', suffix: '.jpg' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.NotificationKeyFilter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-notifications.SqsDestination",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#addEventNotification",
        "@aws-cdk/aws-s3.EventType",
        "@aws-cdk/aws-s3.EventType#OBJECT_REMOVED",
        "@aws-cdk/aws-s3.IBucketNotificationDestination",
        "@aws-cdk/aws-s3.NotificationKeyFilter",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myQueue: sqs.Queue;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst bucket = new s3.Bucket(this, 'MyBucket');\nbucket.addEventNotification(s3.EventType.OBJECT_REMOVED,\n  new s3n.SqsDestination(myQueue),\n  { prefix: 'foo/', suffix: '.jpg' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3d66e95fd4e874bbc111c5e4eb1a425657d087e37cb4ce363cfdfdd6e858d068"
    },
    "5f629284a6395c19edf0bfb810e2482ca218df340552163d0fc1a261a12ef233": {
      "translations": {
        "python": {
          "source": "s3.Bucket(self, \"MyBucket\",\n    object_ownership=s3.ObjectOwnership.OBJECT_WRITER\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Bucket(this, \"MyBucket\", new BucketProps {\n    ObjectOwnership = ObjectOwnership.OBJECT_WRITER\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket.Builder.create(this, \"MyBucket\")\n        .objectOwnership(ObjectOwnership.OBJECT_WRITER)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new s3.Bucket(this, 'MyBucket', {\n  objectOwnership: s3.ObjectOwnership.OBJECT_WRITER,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.ObjectOwnership"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.ObjectOwnership",
        "@aws-cdk/aws-s3.ObjectOwnership#OBJECT_WRITER"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew s3.Bucket(this, 'MyBucket', {\n  objectOwnership: s3.ObjectOwnership.OBJECT_WRITER,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "121bd7894da3efa9c930fb65673b543bc3624345a14180e1df796a317b61b664"
    },
    "ec94deb48c06804fbbba7e5714f2b66ad05a9dde64d81a5997f284cd2155e64b": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyRedirectedBucket\",\n    website_routing_rules=[s3.RoutingRule(\n        host_name=\"www.example.com\",\n        http_redirect_code=\"302\",\n        protocol=s3.RedirectProtocol.HTTPS,\n        replace_key=s3.ReplaceKey.prefix_with(\"test/\"),\n        condition=s3.RoutingRuleCondition(\n            http_error_code_returned_equals=\"200\",\n            key_prefix_equals=\"prefix\"\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyRedirectedBucket\", new BucketProps {\n    WebsiteRoutingRules = new [] { new RoutingRule {\n        HostName = \"www.example.com\",\n        HttpRedirectCode = \"302\",\n        Protocol = RedirectProtocol.HTTPS,\n        ReplaceKey = ReplaceKey.PrefixWith(\"test/\"),\n        Condition = new RoutingRuleCondition {\n            HttpErrorCodeReturnedEquals = \"200\",\n            KeyPrefixEquals = \"prefix\"\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyRedirectedBucket\")\n        .websiteRoutingRules(List.of(RoutingRule.builder()\n                .hostName(\"www.example.com\")\n                .httpRedirectCode(\"302\")\n                .protocol(RedirectProtocol.HTTPS)\n                .replaceKey(ReplaceKey.prefixWith(\"test/\"))\n                .condition(RoutingRuleCondition.builder()\n                        .httpErrorCodeReturnedEquals(\"200\")\n                        .keyPrefixEquals(\"prefix\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyRedirectedBucket', {\n  websiteRoutingRules: [{\n    hostName: 'www.example.com',\n    httpRedirectCode: '302',\n    protocol: s3.RedirectProtocol.HTTPS,\n    replaceKey: s3.ReplaceKey.prefixWith('test/'),\n    condition: {\n      httpErrorCodeReturnedEquals: '200',\n      keyPrefixEquals: 'prefix',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.RedirectProtocol"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.RedirectProtocol",
        "@aws-cdk/aws-s3.RedirectProtocol#HTTPS",
        "@aws-cdk/aws-s3.ReplaceKey",
        "@aws-cdk/aws-s3.ReplaceKey#prefixWith",
        "@aws-cdk/aws-s3.RoutingRuleCondition"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyRedirectedBucket', {\n  websiteRoutingRules: [{\n    hostName: 'www.example.com',\n    httpRedirectCode: '302',\n    protocol: s3.RedirectProtocol.HTTPS,\n    replaceKey: s3.ReplaceKey.prefixWith('test/'),\n    condition: {\n      httpErrorCodeReturnedEquals: '200',\n      keyPrefixEquals: 'prefix',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "43a9a39f4ef516ec09ef55e4674855ce0a71fc60634c12c1c84e5e82f8cb0be2"
    },
    "4b1392ea43479eff2b89be08670f3c8cf9e5adea8d683a41b7923ee0c6ebb8b8": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyRedirectedBucket\",\n    website_redirect=s3.RedirectTarget(host_name=\"www.example.com\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyRedirectedBucket\", new BucketProps {\n    WebsiteRedirect = new RedirectTarget { HostName = \"www.example.com\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyRedirectedBucket\")\n        .websiteRedirect(RedirectTarget.builder().hostName(\"www.example.com\").build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyRedirectedBucket', {\n  websiteRedirect: { hostName: 'www.example.com' },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.RedirectTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.RedirectTarget"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyRedirectedBucket', {\n  websiteRedirect: { hostName: 'www.example.com' },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "cbf53dd3e86a39752ec4ea3432bf22fdb4d8d8392c88d93307dcdcfe3ca09e53"
    },
    "10eceb70d0a466c51d98f437a9171a140d49fb51336708b2086fb39c4d9a927b": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyRedirectedBucket\",\n    website_routing_rules=[s3.RoutingRule(\n        host_name=\"www.example.com\",\n        http_redirect_code=\"302\",\n        protocol=s3.RedirectProtocol.HTTPS,\n        replace_key=s3.ReplaceKey.prefix_with(\"test/\"),\n        condition=s3.RoutingRuleCondition(\n            http_error_code_returned_equals=\"200\",\n            key_prefix_equals=\"prefix\"\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyRedirectedBucket\", new BucketProps {\n    WebsiteRoutingRules = new [] { new RoutingRule {\n        HostName = \"www.example.com\",\n        HttpRedirectCode = \"302\",\n        Protocol = RedirectProtocol.HTTPS,\n        ReplaceKey = ReplaceKey.PrefixWith(\"test/\"),\n        Condition = new RoutingRuleCondition {\n            HttpErrorCodeReturnedEquals = \"200\",\n            KeyPrefixEquals = \"prefix\"\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyRedirectedBucket\")\n        .websiteRoutingRules(List.of(RoutingRule.builder()\n                .hostName(\"www.example.com\")\n                .httpRedirectCode(\"302\")\n                .protocol(RedirectProtocol.HTTPS)\n                .replaceKey(ReplaceKey.prefixWith(\"test/\"))\n                .condition(RoutingRuleCondition.builder()\n                        .httpErrorCodeReturnedEquals(\"200\")\n                        .keyPrefixEquals(\"prefix\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyRedirectedBucket', {\n  websiteRoutingRules: [{\n    hostName: 'www.example.com',\n    httpRedirectCode: '302',\n    protocol: s3.RedirectProtocol.HTTPS,\n    replaceKey: s3.ReplaceKey.prefixWith('test/'),\n    condition: {\n      httpErrorCodeReturnedEquals: '200',\n      keyPrefixEquals: 'prefix',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.ReplaceKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.RedirectProtocol",
        "@aws-cdk/aws-s3.RedirectProtocol#HTTPS",
        "@aws-cdk/aws-s3.ReplaceKey",
        "@aws-cdk/aws-s3.ReplaceKey#prefixWith",
        "@aws-cdk/aws-s3.RoutingRuleCondition"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyRedirectedBucket', {\n  websiteRoutingRules: [{\n    hostName: 'www.example.com',\n    httpRedirectCode: '302',\n    protocol: s3.RedirectProtocol.HTTPS,\n    replaceKey: s3.ReplaceKey.prefixWith('test/'),\n    condition: {\n      httpErrorCodeReturnedEquals: '200',\n      keyPrefixEquals: 'prefix',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "43a9a39f4ef516ec09ef55e4674855ce0a71fc60634c12c1c84e5e82f8cb0be2"
    },
    "f2ad99b44f07fb8aea903f3ff40197c0e901b3d29e51e589fffa067f7d5a8861": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyRedirectedBucket\",\n    website_routing_rules=[s3.RoutingRule(\n        host_name=\"www.example.com\",\n        http_redirect_code=\"302\",\n        protocol=s3.RedirectProtocol.HTTPS,\n        replace_key=s3.ReplaceKey.prefix_with(\"test/\"),\n        condition=s3.RoutingRuleCondition(\n            http_error_code_returned_equals=\"200\",\n            key_prefix_equals=\"prefix\"\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyRedirectedBucket\", new BucketProps {\n    WebsiteRoutingRules = new [] { new RoutingRule {\n        HostName = \"www.example.com\",\n        HttpRedirectCode = \"302\",\n        Protocol = RedirectProtocol.HTTPS,\n        ReplaceKey = ReplaceKey.PrefixWith(\"test/\"),\n        Condition = new RoutingRuleCondition {\n            HttpErrorCodeReturnedEquals = \"200\",\n            KeyPrefixEquals = \"prefix\"\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = Bucket.Builder.create(this, \"MyRedirectedBucket\")\n        .websiteRoutingRules(List.of(RoutingRule.builder()\n                .hostName(\"www.example.com\")\n                .httpRedirectCode(\"302\")\n                .protocol(RedirectProtocol.HTTPS)\n                .replaceKey(ReplaceKey.prefixWith(\"test/\"))\n                .condition(RoutingRuleCondition.builder()\n                        .httpErrorCodeReturnedEquals(\"200\")\n                        .keyPrefixEquals(\"prefix\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyRedirectedBucket', {\n  websiteRoutingRules: [{\n    hostName: 'www.example.com',\n    httpRedirectCode: '302',\n    protocol: s3.RedirectProtocol.HTTPS,\n    replaceKey: s3.ReplaceKey.prefixWith('test/'),\n    condition: {\n      httpErrorCodeReturnedEquals: '200',\n      keyPrefixEquals: 'prefix',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.RoutingRuleCondition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.RedirectProtocol",
        "@aws-cdk/aws-s3.RedirectProtocol#HTTPS",
        "@aws-cdk/aws-s3.ReplaceKey",
        "@aws-cdk/aws-s3.ReplaceKey#prefixWith",
        "@aws-cdk/aws-s3.RoutingRuleCondition"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyRedirectedBucket', {\n  websiteRoutingRules: [{\n    hostName: 'www.example.com',\n    httpRedirectCode: '302',\n    protocol: s3.RedirectProtocol.HTTPS,\n    replaceKey: s3.ReplaceKey.prefixWith('test/'),\n    condition: {\n      httpErrorCodeReturnedEquals: '200',\n      keyPrefixEquals: 'prefix',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "43a9a39f4ef516ec09ef55e4674855ce0a71fc60634c12c1c84e5e82f8cb0be2"
    },
    "d4efc4ac37461bbe79b3649e2f06b9dd42269757d138d8999b6d067ce91e16d7": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\")\nbucket.url_for_object(\"objectname\") # Path-Style URL\nbucket.virtual_hosted_url_for_object(\"objectname\") # Virtual Hosted-Style URL\nbucket.virtual_hosted_url_for_object(\"objectname\", regional=False)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nbucket.UrlForObject(\"objectname\"); // Path-Style URL\nbucket.VirtualHostedUrlForObject(\"objectname\"); // Virtual Hosted-Style URL\nbucket.VirtualHostedUrlForObject(\"objectname\", new VirtualHostedStyleUrlOptions { Regional = false });",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nbucket.urlForObject(\"objectname\"); // Path-Style URL\nbucket.virtualHostedUrlForObject(\"objectname\"); // Virtual Hosted-Style URL\nbucket.virtualHostedUrlForObject(\"objectname\", VirtualHostedStyleUrlOptions.builder().regional(false).build());",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket');\nbucket.urlForObject('objectname'); // Path-Style URL\nbucket.virtualHostedUrlForObject('objectname'); // Virtual Hosted-Style URL\nbucket.virtualHostedUrlForObject('objectname', { regional: false }); // Virtual Hosted-Style URL but non-regional",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-s3.VirtualHostedStyleUrlOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#urlForObject",
        "@aws-cdk/aws-s3.BucketBase#virtualHostedUrlForObject",
        "@aws-cdk/aws-s3.VirtualHostedStyleUrlOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket');\nbucket.urlForObject('objectname'); // Path-Style URL\nbucket.virtualHostedUrlForObject('objectname'); // Virtual Hosted-Style URL\nbucket.virtualHostedUrlForObject('objectname', { regional: false });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "1000b123c64ba0086de8fd1d329cecdcbdb9daf23344ad8bb7101c3785b99618"
    }
  }
}
