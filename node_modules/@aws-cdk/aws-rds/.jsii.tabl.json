{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "28b6b65a1be4b841bb576c5bb13aad1597a2be92780f7ff8026776a251aaf9a9": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_rds as rds",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.RDS;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.rds.*;",
          "version": "1"
        },
        "$": {
          "source": "import * as rds from '@aws-cdk/aws-rds';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 15
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as rds from '@aws-cdk/aws-rds';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "9f1956e5100276c1ea9eb6c96d229cccde33d383552f132e47a4d18936a30f03": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora_mysql(version=rds.AuroraMysqlEngineVersion.VER_2_08_1),\n    credentials=rds.Credentials.from_generated_secret(\"clusteradmin\"),  # Optional - will default to 'admin' username and generated password\n    instance_props=rds.InstanceProps(\n        # optional , defaults to t3.medium\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n        vpc_subnets=ec2.SubnetSelection(\n            subnet_type=ec2.SubnetType.PRIVATE\n        ),\n        vpc=vpc\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AuroraMysql(new AuroraMysqlClusterEngineProps { Version = AuroraMysqlEngineVersion.VER_2_08_1 }),\n    Credentials = Credentials.FromGeneratedSecret(\"clusteradmin\"),  // Optional - will default to 'admin' username and generated password\n    InstanceProps = new InstanceProps {\n        // optional , defaults to t3.medium\n        InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.SMALL),\n        VpcSubnets = new SubnetSelection {\n            SubnetType = SubnetType.PRIVATE\n        },\n        Vpc = vpc\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.auroraMysql(AuroraMysqlClusterEngineProps.builder().version(AuroraMysqlEngineVersion.VER_2_08_1).build()))\n        .credentials(Credentials.fromGeneratedSecret(\"clusteradmin\")) // Optional - will default to 'admin' username and generated password\n        .instanceProps(InstanceProps.builder()\n                // optional , defaults to t3.medium\n                .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.SMALL))\n                .vpcSubnets(SubnetSelection.builder()\n                        .subnetType(SubnetType.PRIVATE)\n                        .build())\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password\n  instanceProps: {\n    // optional , defaults to t3.medium\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    vpc,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 25
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.AuroraMysqlClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion#VER_2_08_1",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#auroraMysql",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password\n  instanceProps: {\n    // optional , defaults to t3.medium\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    vpc,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 35,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 15,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c53df0cc881dd43319a5351a927046b4bc963497b518929ca906fe87c39018f7"
    },
    "f5df07eb7b292f106b9d95a496adc934ab19b89031a6f3eccc50d27e3b6c0fb3": {
      "translations": {
        "python": {
          "source": "custom_engine_version = rds.AuroraMysqlEngineVersion.of(\"5.7.mysql_aurora.2.08.1\")",
          "version": "1"
        },
        "csharp": {
          "source": "AuroraMysqlEngineVersion customEngineVersion = AuroraMysqlEngineVersion.Of(\"5.7.mysql_aurora.2.08.1\");",
          "version": "1"
        },
        "java": {
          "source": "AuroraMysqlEngineVersion customEngineVersion = AuroraMysqlEngineVersion.of(\"5.7.mysql_aurora.2.08.1\");",
          "version": "1"
        },
        "$": {
          "source": "const customEngineVersion = rds.AuroraMysqlEngineVersion.of('5.7.mysql_aurora.2.08.1');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 44
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion#of"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst customEngineVersion = rds.AuroraMysqlEngineVersion.of('5.7.mysql_aurora.2.08.1');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "07138ab3b679ab9689fad99c8c29b8e015690c7e2725928f5777a7a79c2e4028"
    },
    "6facc7653bb79f8ec15f4b8939cc98e8513caf66bd881dd81045d0487c84e2fd": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nrds.DatabaseClusterFromSnapshot(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(version=rds.AuroraEngineVersion.VER_1_22_2),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew DatabaseClusterFromSnapshot(this, \"Database\", new DatabaseClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps { Version = AuroraEngineVersion.VER_1_22_2 }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseClusterFromSnapshot.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder().version(AuroraEngineVersion.VER_1_22_2).build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 55
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_22_2",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshotProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b4f86f5aeba11e5ec90f8f38aaa0189a946cde1427942d192927328b7222efc0"
    },
    "3df98b691d42b1a04867c8c00ffd50c7d34fbd03c40abd777378865922becc61": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n    credentials=rds.Credentials.from_generated_secret(\"syscdk\"),  # Optional - will default to 'admin' username and generated password\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.SMALL),\n    Credentials = Credentials.FromGeneratedSecret(\"syscdk\"),  // Optional - will default to 'admin' username and generated password\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.SMALL))\n        .credentials(Credentials.fromGeneratedSecret(\"syscdk\")) // Optional - will default to 'admin' username and generated password\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n  credentials: rds.Credentials.fromGeneratedSecret('syscdk'), // Optional - will default to 'admin' username and generated password\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 72
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n  credentials: rds.Credentials.fromGeneratedSecret('syscdk'), // Optional - will default to 'admin' username and generated password\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 34,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 15,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "f49b0b7562988529bce9a6cccc5c1b62e72332313bc61ef2ad32f480abb0b9f4"
    },
    "0223eae04af38af848c2d5bd95bb1d4e17a1b462aee00664e45a04de6d9afe82": {
      "translations": {
        "python": {
          "source": "custom_engine_version = rds.OracleEngineVersion.of(\"19.0.0.0.ru-2020-04.rur-2020-04.r1\", \"19\")",
          "version": "1"
        },
        "csharp": {
          "source": "OracleEngineVersion customEngineVersion = OracleEngineVersion.Of(\"19.0.0.0.ru-2020-04.rur-2020-04.r1\", \"19\");",
          "version": "1"
        },
        "java": {
          "source": "OracleEngineVersion customEngineVersion = OracleEngineVersion.of(\"19.0.0.0.ru-2020-04.rur-2020-04.r1\", \"19\");",
          "version": "1"
        },
        "$": {
          "source": "const customEngineVersion = rds.OracleEngineVersion.of('19.0.0.0.ru-2020-04.rur-2020-04.r1', '19');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 89
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#of"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst customEngineVersion = rds.OracleEngineVersion.of('19.0.0.0.ru-2020-04.rur-2020-04.r1', '19');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "e4ca1b6421e131661e0a1c0601f3b9682386811ae4cf64335e5cd9a2ae93f39c"
    },
    "913a6b83ef16b067c61e79477ae480b10e448890b4517f4db748cb8bcd2e2d49": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpc=vpc,\n    max_allocated_storage=200\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.SMALL),\n    Vpc = vpc,\n    MaxAllocatedStorage = 200\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.SMALL))\n        .vpc(vpc)\n        .maxAllocatedStorage(200)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n  vpc,\n  maxAllocatedStorage: 200,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 100
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n  vpc,\n  maxAllocatedStorage: 200,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 11,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "0b2076c5e1b7212a87a5a24ba8dc3328593d592d96bdee94fe0a01b84dca5836"
    },
    "5d3bcd67397cba005e38f29b8264fc439bbf0b02520846658344bd643677bb5c": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n# source_instance is of type DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 114
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "00e73ec9c0df9f77c67b4e12151f3233a1c325df424515ed8a415bcee3e17404"
    },
    "db829f1a4d7c4b7279d532cdd002a019feb495e02e6374f1b27d0ce94c96c042": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 138
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#metricCPUUtilization",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "fd8cb77cd8a244c784a0100970986f664aad034cbd1a7aa0129ef8b0cef58bc5"
    },
    "1ca6f681a1d4ad25eff9e0b2564d8b9aba418c723c041ce3f2b5315ffe187cf8": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 149
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#metricCPUUtilization",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "fd8cb77cd8a244c784a0100970986f664aad034cbd1a7aa0129ef8b0cef58bc5"
    },
    "0173c7d98746bf2cf13257d228cd63c5e19ea119ffb61f0e98ce622fbe8eb380": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n# Setting public accessibility for DB instance\nrds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.mysql(\n        version=rds.MysqlEngineVersion.VER_8_0_19\n    ),\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE\n    ),\n    publicly_accessible=True\n)\n\n# Setting public accessibility for DB cluster\nrds.DatabaseCluster(self, \"DatabaseCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(\n        vpc=vpc,\n        vpc_subnets=ec2.SubnetSelection(\n            subnet_type=ec2.SubnetType.PRIVATE\n        ),\n        publicly_accessible=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n// Setting public accessibility for DB instance\n// Setting public accessibility for DB instance\nnew DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Mysql(new MySqlInstanceEngineProps {\n        Version = MysqlEngineVersion.VER_8_0_19\n    }),\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE\n    },\n    PubliclyAccessible = true\n});\n\n// Setting public accessibility for DB cluster\n// Setting public accessibility for DB cluster\nnew DatabaseCluster(this, \"DatabaseCluster\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps {\n        Vpc = vpc,\n        VpcSubnets = new SubnetSelection {\n            SubnetType = SubnetType.PRIVATE\n        },\n        PubliclyAccessible = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n// Setting public accessibility for DB instance\n// Setting public accessibility for DB instance\nDatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.mysql(MySqlInstanceEngineProps.builder()\n                .version(MysqlEngineVersion.VER_8_0_19)\n                .build()))\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE)\n                .build())\n        .publiclyAccessible(true)\n        .build();\n\n// Setting public accessibility for DB cluster\n// Setting public accessibility for DB cluster\nDatabaseCluster.Builder.create(this, \"DatabaseCluster\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .vpcSubnets(SubnetSelection.builder()\n                        .subnetType(SubnetType.PRIVATE)\n                        .build())\n                .publiclyAccessible(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n// Setting public accessibility for DB instance\nnew rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({\n    version: rds.MysqlEngineVersion.VER_8_0_19,\n  }),\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  },\n  publiclyAccessible: true,\n});\n\n// Setting public accessibility for DB cluster\nnew rds.DatabaseCluster(this, 'DatabaseCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: {\n    vpc,\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    publiclyAccessible: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 231
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#mysql",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.MySqlInstanceEngineProps",
        "@aws-cdk/aws-rds.MysqlEngineVersion",
        "@aws-cdk/aws-rds.MysqlEngineVersion#VER_8_0_19"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// Setting public accessibility for DB instance\nnew rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({\n    version: rds.MysqlEngineVersion.VER_8_0_19,\n  }),\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  },\n  publiclyAccessible: true,\n});\n\n// Setting public accessibility for DB cluster\nnew rds.DatabaseCluster(this, 'DatabaseCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: {\n    vpc,\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    publiclyAccessible: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 34,
        "104": 2,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 6,
        "194": 12,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 10,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "22a1a3a2378be42cff0cfcf62bc4bac0d536ef1580c3bb4629697fc00cce1108"
    },
    "9f569f3caa8f767f2a0b870a16f7ccc9e719fd740e272ec01cd0f17fedc61b4b": {
      "translations": {
        "python": {
          "source": "# instance is of type DatabaseInstance\n# fn is of type Function\n\nrule = instance.on_event(\"InstanceEvent\", target=targets.LambdaFunction(fn))",
          "version": "1"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\nFunction fn;\n\nRule rule = instance.OnEvent(\"InstanceEvent\", new OnEventOptions { Target = new LambdaFunction(fn) });",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\nFunction fn;\n\nRule rule = instance.onEvent(\"InstanceEvent\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\ndeclare const fn: lambda.Function;\nconst rule = instance.onEvent('InstanceEvent', { target: new targets.LambdaFunction(fn) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 263
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst rule = instance.onEvent('InstanceEvent', { target: new targets.LambdaFunction(fn) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "dbc886cb33999e9a07689ebbd308eddafea12a3cf571f5fbc0db6dac5fe591b5"
    },
    "02f29b62f7fdc08930bdc84d2a8f946424c5349e16b72f134bc85d8816f64301": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nrds.DatabaseInstance(self, \"InstanceWithUsername\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\")\n)\n\nrds.DatabaseInstance(self, \"InstanceWithUsernameAndPassword\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_password(\"postgres\", SecretValue.ssm_secure(\"/dbPassword\", \"1\"))\n)\n\nmy_secret = secretsmanager.Secret.from_secret_name(self, \"DBSecret\", \"myDBLoginInfo\")\nrds.DatabaseInstance(self, \"InstanceWithSecretLogin\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_secret(my_secret)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nnew DatabaseInstance(this, \"InstanceWithUsername\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\")\n});\n\nnew DatabaseInstance(this, \"InstanceWithUsernameAndPassword\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromPassword(\"postgres\", SecretValue.SsmSecure(\"/dbPassword\", \"1\"))\n});\n\nISecret mySecret = Secret.FromSecretName(this, \"DBSecret\", \"myDBLoginInfo\");\nnew DatabaseInstance(this, \"InstanceWithSecretLogin\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromSecret(mySecret)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nDatabaseInstance.Builder.create(this, \"InstanceWithUsername\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\"))\n        .build();\n\nDatabaseInstance.Builder.create(this, \"InstanceWithUsernameAndPassword\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromPassword(\"postgres\", SecretValue.ssmSecure(\"/dbPassword\", \"1\")))\n        .build();\n\nISecret mySecret = Secret.fromSecretName(this, \"DBSecret\", \"myDBLoginInfo\");\nDatabaseInstance.Builder.create(this, \"InstanceWithSecretLogin\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromSecret(mySecret))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nnew rds.DatabaseInstance(this, 'InstanceWithUsername', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres'), // Creates an admin user of postgres with a generated password\n});\n\nnew rds.DatabaseInstance(this, 'InstanceWithUsernameAndPassword', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromPassword('postgres', SecretValue.ssmSecure('/dbPassword', '1')), // Use password from SSM\n});\n\nconst mySecret = secretsmanager.Secret.fromSecretName(this, 'DBSecret', 'myDBLoginInfo');\nnew rds.DatabaseInstance(this, 'InstanceWithSecretLogin', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromSecret(mySecret), // Get both username and password from existing secret\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 276
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.Credentials#fromPassword",
        "@aws-cdk/aws-rds.Credentials#fromSecret",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretName",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#ssmSecure"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nnew rds.DatabaseInstance(this, 'InstanceWithUsername', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres'), // Creates an admin user of postgres with a generated password\n});\n\nnew rds.DatabaseInstance(this, 'InstanceWithUsernameAndPassword', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromPassword('postgres', SecretValue.ssmSecure('/dbPassword', '1')), // Use password from SSM\n});\n\nconst mySecret = secretsmanager.Secret.fromSecretName(this, 'DBSecret', 'myDBLoginInfo');\nnew rds.DatabaseInstance(this, 'InstanceWithSecretLogin', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromSecret(mySecret), // Get both username and password from existing secret\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 42,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 16,
        "196": 6,
        "197": 3,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 6,
        "290": 1
      },
      "fqnsFingerprint": "43b14dc9a6e2beda555d249eb6fa627185eeec858ff700c51a2a1c79ecbbce8f"
    },
    "e7279471a7153eaccbc2f6d503b16461ce767300d55fba45ee22d6945318fa74": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nmy_key = kms.Key(self, \"MyKey\")\n\nrds.DatabaseInstance(self, \"InstanceWithCustomizedSecret\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\",\n        secret_name=\"my-cool-name\",\n        encryption_key=my_key,\n        exclude_characters=\"!&*^#@()\",\n        replica_regions=[secretsmanager.ReplicaRegion(region=\"eu-west-1\"), secretsmanager.ReplicaRegion(region=\"eu-west-2\")]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nKey myKey = new Key(this, \"MyKey\");\n\nnew DatabaseInstance(this, \"InstanceWithCustomizedSecret\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\", new CredentialsBaseOptions {\n        SecretName = \"my-cool-name\",\n        EncryptionKey = myKey,\n        ExcludeCharacters = \"!&*^#@()\",\n        ReplicaRegions = new [] { new ReplicaRegion { Region = \"eu-west-1\" }, new ReplicaRegion { Region = \"eu-west-2\" } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nKey myKey = new Key(this, \"MyKey\");\n\nDatabaseInstance.Builder.create(this, \"InstanceWithCustomizedSecret\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\", CredentialsBaseOptions.builder()\n                .secretName(\"my-cool-name\")\n                .encryptionKey(myKey)\n                .excludeCharacters(\"!&*^#@()\")\n                .replicaRegions(List.of(ReplicaRegion.builder().region(\"eu-west-1\").build(), ReplicaRegion.builder().region(\"eu-west-2\").build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 301
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.CredentialsBaseOptions",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 29,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "6cb8af87d342425614fa54ef9d4d6f59badbe4a5a222c9eb62191febd45571cc"
    },
    "e89f956d1bfb57855ff3c2b5b5ea83c4bd4d91cf1ce4cd94af1d9953c8daaf90": {
      "translations": {
        "python": {
          "source": "# cluster is of type DatabaseCluster\n\ncluster.connections.allow_from_any_ipv4(ec2.Port.all_traffic(), \"Open to the world\")",
          "version": "1"
        },
        "csharp": {
          "source": "DatabaseCluster cluster;\n\ncluster.Connections.AllowFromAnyIpv4(Port.AllTraffic(), \"Open to the world\");",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster;\n\ncluster.connections.allowFromAnyIpv4(Port.allTraffic(), \"Open to the world\");",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: rds.DatabaseCluster;\ncluster.connections.allowFromAnyIpv4(ec2.Port.allTraffic(), 'Open to the world');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 323
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFromAnyIpv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#allTraffic",
        "@aws-cdk/aws-rds.DatabaseCluster#connections"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: rds.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.connections.allowFromAnyIpv4(ec2.Port.allTraffic(), 'Open to the world');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 4,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "bb2a2a4e7b68d9710866218f9a194a691785c1537738bff9730e79be9ab8b1a9"
    },
    "4426b26f0a66f8024ad2178e361e1669ffc8db82a06540582f6fc1a9b79eccae": {
      "translations": {
        "python": {
          "source": "# cluster is of type DatabaseCluster\n\nwrite_address = cluster.cluster_endpoint.socket_address",
          "version": "1"
        },
        "csharp": {
          "source": "DatabaseCluster cluster;\n\nstring writeAddress = cluster.ClusterEndpoint.SocketAddress;",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster;\n\nString writeAddress = cluster.getClusterEndpoint().getSocketAddress();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: rds.DatabaseCluster;\nconst writeAddress = cluster.clusterEndpoint.socketAddress;   // \"HOSTNAME:PORT\"",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 331
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseCluster#clusterEndpoint",
        "@aws-cdk/aws-rds.Endpoint#socketAddress"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: rds.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst writeAddress = cluster.clusterEndpoint.socketAddress;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "76b680e82872de8e821968b0545c0ca9e41b8212ec61676bf50b9604c5fe2f37"
    },
    "5aa87cf425c49ec6fc6b256a512f0fa6da70a098a6e3f7f59e98462c0ffc16d1": {
      "translations": {
        "python": {
          "source": "# instance is of type DatabaseInstance\n\naddress = instance.instance_endpoint.socket_address",
          "version": "1"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\n\nstring address = instance.InstanceEndpoint.SocketAddress;",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\n\nString address = instance.getInstanceEndpoint().getSocketAddress();",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\nconst address = instance.instanceEndpoint.socketAddress;   // \"HOSTNAME:PORT\"",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 338
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseInstance#instanceEndpoint",
        "@aws-cdk/aws-rds.Endpoint#socketAddress"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst address = instance.instanceEndpoint.socketAddress;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "ba1a9fe9105802bfae0c6542777313a335bea0bdd9f67cf868797e38edfb48fd"
    },
    "5578f9edce2648925ebc56c2163a1610655fb797309fe8a86c339e3e5663389a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n# instance is of type DatabaseInstance\n\ninstance.add_rotation_single_user(\n    automatically_after=cdk.Duration.days(7),  # defaults to 30 days\n    exclude_characters=\"!@#$%^&*\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\nDatabaseInstance instance;\ninstance.AddRotationSingleUser(new RotationSingleUserOptions {\n    AutomaticallyAfter = Duration.Days(7),  // defaults to 30 days\n    ExcludeCharacters = \"!@#$%^&*\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\nDatabaseInstance instance;\n\ninstance.addRotationSingleUser(RotationSingleUserOptions.builder()\n        .automaticallyAfter(Duration.days(7)) // defaults to 30 days\n        .excludeCharacters(\"!@#$%^&*\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\ndeclare const instance: rds.DatabaseInstance;\ninstance.addRotationSingleUser({\n  automaticallyAfter: cdk.Duration.days(7), // defaults to 30 days\n  excludeCharacters: '!@#$%^&*', // defaults to the set \" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\"\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 347
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.RotationSingleUserOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const instance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ninstance.addRotationSingleUser({\n  automaticallyAfter: cdk.Duration.days(7), // defaults to 30 days\n  excludeCharacters: '!@#$%^&*', // defaults to the set \" %+~`#/// here*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e8cb562aa2891d2e153c6173bff3eeb62b2cc75ebcd21d35305277112874ff35"
    },
    "4d6f62ac73433cc8b59277377a641abecfacb59c52bc00e330bdaf852cfdcca0": {
      "translations": {
        "python": {
          "source": "cluster = rds.DatabaseCluster(stack, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n        vpc=vpc\n    )\n)\n\ncluster.add_rotation_single_user()",
          "version": "1"
        },
        "csharp": {
          "source": "DatabaseCluster cluster = new DatabaseCluster(stack, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps {\n        InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.SMALL),\n        Vpc = vpc\n    }\n});\n\ncluster.AddRotationSingleUser();",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster = DatabaseCluster.Builder.create(stack, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder()\n                .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.SMALL))\n                .vpc(vpc)\n                .build())\n        .build();\n\ncluster.addRotationSingleUser();",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new rds.DatabaseCluster(stack, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: {\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n    vpc,\n  },\n});\n\ncluster.addRotationSingleUser();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 357
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#addRotationSingleUser",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps"
      ],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-rds-cluster-rotation');\n\nconst vpc = new ec2.Vpc(stack, 'VPC');\n\n/// !show\nconst cluster = new rds.DatabaseCluster(stack, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: {\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n    vpc,\n  },\n});\n\ncluster.addRotationSingleUser();\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 22,
        "193": 2,
        "194": 10,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1
      },
      "fqnsFingerprint": "65df4e86f537a76e8f3660c8f40d8bbb8bc3bba92a2b712cd6bfa0686070544c"
    },
    "f59fd907511f92778c00e2fbf4ac2410b4bd69c0b22f1eed14ae46b937bad7f1": {
      "translations": {
        "python": {
          "source": "# instance is of type DatabaseInstance\n# my_imported_secret is of type DatabaseSecret\n\ninstance.add_rotation_multi_user(\"MyUser\",\n    secret=my_imported_secret\n)",
          "version": "1"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\nDatabaseSecret myImportedSecret;\n\ninstance.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {\n    Secret = myImportedSecret\n});",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\nDatabaseSecret myImportedSecret;\n\ninstance.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder()\n        .secret(myImportedSecret)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\ndeclare const myImportedSecret: rds.DatabaseSecret;\ninstance.addRotationMultiUser('MyUser', {\n  secret: myImportedSecret, // This secret must have the `masterarn` key\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 371
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\ndeclare const myImportedSecret: rds.DatabaseSecret;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ninstance.addRotationMultiUser('MyUser', {\n  secret: myImportedSecret, // This secret must have the `masterarn` key\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "653ab72b0a174e2589476b859bc696ae14ab668cc45041687772ec95afdf7697"
    },
    "9744f64511e589001ae6af17fcd93e99c56a9053da203f256218109f0e6a7b76": {
      "translations": {
        "python": {
          "source": "# instance is of type DatabaseInstance\n\nmy_user_secret = rds.DatabaseSecret(self, \"MyUserSecret\",\n    username=\"myuser\",\n    secret_name=\"my-user-secret\",  # optional, defaults to a CloudFormation-generated name\n    master_secret=instance.secret,\n    exclude_characters=\"{}[]()'\\\"/\\\\\"\n)\nmy_user_secret_attached = my_user_secret.attach(instance) # Adds DB connections information in the secret\n\ninstance.add_rotation_multi_user(\"MyUser\",  # Add rotation using the multi user scheme\n    secret=my_user_secret_attached)",
          "version": "1"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\n\nDatabaseSecret myUserSecret = new DatabaseSecret(this, \"MyUserSecret\", new DatabaseSecretProps {\n    Username = \"myuser\",\n    SecretName = \"my-user-secret\",  // optional, defaults to a CloudFormation-generated name\n    MasterSecret = instance.Secret,\n    ExcludeCharacters = \"{}[]()'\\\"/\\\\\"\n});\nISecret myUserSecretAttached = myUserSecret.Attach(instance); // Adds DB connections information in the secret\n\ninstance.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {  // Add rotation using the multi user scheme\n    Secret = myUserSecretAttached });",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\n\nDatabaseSecret myUserSecret = DatabaseSecret.Builder.create(this, \"MyUserSecret\")\n        .username(\"myuser\")\n        .secretName(\"my-user-secret\") // optional, defaults to a CloudFormation-generated name\n        .masterSecret(instance.getSecret())\n        .excludeCharacters(\"{}[]()'\\\"/\\\\\")\n        .build();\nISecret myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder() // Add rotation using the multi user scheme\n        .secret(myUserSecretAttached).build());",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\nconst myUserSecret = new rds.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  secretName: 'my-user-secret', // optional, defaults to a CloudFormation-generated name\n  masterSecret: instance.secret,\n  excludeCharacters: '{}[]()\\'\"/\\\\', // defaults to the set \" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\nconst myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 381
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseInstance#secret",
        "@aws-cdk/aws-rds.DatabaseSecret",
        "@aws-cdk/aws-rds.DatabaseSecretProps",
        "@aws-cdk/aws-rds.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ISecretAttachmentTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myUserSecret = new rds.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  secretName: 'my-user-secret', // optional, defaults to a CloudFormation-generated name\n  masterSecret: instance.secret,\n  excludeCharacters: '{}[]()\\'\"/\\\\', // defaults to the set \" %+~`#/// here*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\nconst myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ae10c65e8da796825ec2f3b70ca929a0de79657559371fdb28caaeef5382543b"
    },
    "ee5b1ed0c0ce86f4670bcea7b55e0f8eab9ae732304d5c8d090a414f0d1a1f2b": {
      "translations": {
        "python": {
          "source": "# instance is of type DatabaseInstance\n# my_endpoint is of type InterfaceVpcEndpoint\n\n\ninstance.add_rotation_single_user(\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT),  # Place rotation Lambda in private subnets\n    endpoint=my_endpoint\n)",
          "version": "1"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\nInterfaceVpcEndpoint myEndpoint;\n\n\ninstance.AddRotationSingleUser(new RotationSingleUserOptions {\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PRIVATE_WITH_NAT },  // Place rotation Lambda in private subnets\n    Endpoint = myEndpoint\n});",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\nInterfaceVpcEndpoint myEndpoint;\n\n\ninstance.addRotationSingleUser(RotationSingleUserOptions.builder()\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PRIVATE_WITH_NAT).build()) // Place rotation Lambda in private subnets\n        .endpoint(myEndpoint)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\ndeclare const myEndpoint: ec2.InterfaceVpcEndpoint;\n\ninstance.addRotationSingleUser({\n  vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_NAT }, // Place rotation Lambda in private subnets\n  endpoint: myEndpoint, // Use VPC interface endpoint\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 404
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-rds.RotationSingleUserOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\ndeclare const myEndpoint: ec2.InterfaceVpcEndpoint;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ninstance.addRotationSingleUser({\n  vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_NAT }, // Place rotation Lambda in private subnets\n  endpoint: myEndpoint, // Use VPC interface endpoint\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 15,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "3e8a1f8c3c0ed8741531959f3b5761aba7f698ec4f7b36d61c17ec1e37ec54e6"
    },
    "9b4ce513d0172ddcd4431f61151ff735749b157df1c0bd82ba0a98c8b8d8a8f2": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.mysql(version=rds.MysqlEngineVersion.VER_8_0_19),\n    vpc=vpc,\n    iam_authentication=True\n)\nrole = iam.Role(self, \"DBRole\", assumed_by=iam.AccountPrincipal(self.account))\ninstance.grant_connect(role)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Mysql(new MySqlInstanceEngineProps { Version = MysqlEngineVersion.VER_8_0_19 }),\n    Vpc = vpc,\n    IamAuthentication = true\n});\nRole role = new Role(this, \"DBRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\ninstance.GrantConnect(role);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.mysql(MySqlInstanceEngineProps.builder().version(MysqlEngineVersion.VER_8_0_19).build()))\n        .vpc(vpc)\n        .iamAuthentication(true)\n        .build();\nRole role = Role.Builder.create(this, \"DBRole\").assumedBy(new AccountPrincipal(this.account)).build();\ninstance.grantConnect(role);",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  iamAuthentication: true, // Optional - will be automatically set if you call grantConnect().\n});\nconst role = new iam.Role(this, 'DBRole', { assumedBy: new iam.AccountPrincipal(this.account) });\ninstance.grantConnect(role); // Grant the role connection access to the DB.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 424
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#grantConnect",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#mysql",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.MySqlInstanceEngineProps",
        "@aws-cdk/aws-rds.MysqlEngineVersion",
        "@aws-cdk/aws-rds.MysqlEngineVersion#VER_8_0_19",
        "@aws-cdk/core.Stack#account"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  iamAuthentication: true, // Optional - will be automatically set if you call grantConnect().\n});\nconst role = new iam.Role(this, 'DBRole', { assumedBy: new iam.AccountPrincipal(this.account) });\ninstance.grantConnect(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 26,
        "104": 3,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a6b4c5e39988ae39a2ba7c95a8ab9dc068c6782e3427e54cc097ae178e072bb5"
    },
    "466a673d9d83dc0d28889622b2d830ff7904f3b39c7d9b829bc7ec2d4c985c32": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 437
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7f39c98e8008c24bc0976a97c9a92a3fcf57bba44e06e5dca80b5121edbb6b98"
    },
    "17846389cf2413aa4cb978a4b312811ba5aec5ecb4751b5166f153b2ff8d673f": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nrole = iam.Role(self, \"RDSDirectoryServicesRole\",\n    assumed_by=iam.ServicePrincipal(\"rds.amazonaws.com\"),\n    managed_policies=[\n        iam.ManagedPolicy.from_aws_managed_policy_name(\"service-role/AmazonRDSDirectoryServiceAccess\")\n    ]\n)\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.mysql(version=rds.MysqlEngineVersion.VER_8_0_19),\n    vpc=vpc,\n    domain=\"d-????????\",  # The ID of the domain for the instance to join.\n    domain_role=role\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nRole role = new Role(this, \"RDSDirectoryServicesRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"rds.amazonaws.com\"),\n    ManagedPolicies = new [] { ManagedPolicy.FromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\") }\n});\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Mysql(new MySqlInstanceEngineProps { Version = MysqlEngineVersion.VER_8_0_19 }),\n    Vpc = vpc,\n    Domain = \"d-????????\",  // The ID of the domain for the instance to join.\n    DomainRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nRole role = Role.Builder.create(this, \"RDSDirectoryServicesRole\")\n        .assumedBy(new ServicePrincipal(\"rds.amazonaws.com\"))\n        .managedPolicies(List.of(ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\")))\n        .build();\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.mysql(MySqlInstanceEngineProps.builder().version(MysqlEngineVersion.VER_8_0_19).build()))\n        .vpc(vpc)\n        .domain(\"d-????????\") // The ID of the domain for the instance to join.\n        .domainRole(role)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 466
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy#fromAwsManagedPolicyName",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#mysql",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.MySqlInstanceEngineProps",
        "@aws-cdk/aws-rds.MysqlEngineVersion",
        "@aws-cdk/aws-rds.MysqlEngineVersion#VER_8_0_19"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "04a63890573eea5deed37a935915570e71a3168dfe1dda088a731117a47a1d6f"
    },
    "5291dd8d92bf2c89bc789f96875571a8a2a2d53257894b871107ec6e1f03c1ba": {
      "translations": {
        "python": {
          "source": "# The number of database connections in use (average over 5 minutes)\n# instance is of type DatabaseInstance\n\n# Average CPU utilization over 5 minutes\n# cluster is of type DatabaseCluster\n\ndb_connections = instance.metric_database_connections()\ncpu_utilization = cluster.metric_cPUUtilization()\n\n# The average amount of time taken per disk I/O operation (average over 1 minute)\nread_latency = instance.metric(\"ReadLatency\", statistic=\"Average\", period=Duration.seconds(60))",
          "version": "1"
        },
        "csharp": {
          "source": "// The number of database connections in use (average over 5 minutes)\nDatabaseInstance instance;\n\n// Average CPU utilization over 5 minutes\nDatabaseCluster cluster;\n\nMetric dbConnections = instance.MetricDatabaseConnections();\nMetric cpuUtilization = cluster.MetricCPUUtilization();\n\n// The average amount of time taken per disk I/O operation (average over 1 minute)\nMetric readLatency = instance.Metric(\"ReadLatency\", new MetricOptions { Statistic = \"Average\", Period = Duration.Seconds(60) });",
          "version": "1"
        },
        "java": {
          "source": "// The number of database connections in use (average over 5 minutes)\nDatabaseInstance instance;\n\n// Average CPU utilization over 5 minutes\nDatabaseCluster cluster;\n\nMetric dbConnections = instance.metricDatabaseConnections();\nMetric cpuUtilization = cluster.metricCPUUtilization();\n\n// The average amount of time taken per disk I/O operation (average over 1 minute)\nMetric readLatency = instance.metric(\"ReadLatency\", MetricOptions.builder().statistic(\"Average\").period(Duration.seconds(60)).build());",
          "version": "1"
        },
        "$": {
          "source": "// The number of database connections in use (average over 5 minutes)\ndeclare const instance: rds.DatabaseInstance;\nconst dbConnections = instance.metricDatabaseConnections();\n\n// Average CPU utilization over 5 minutes\ndeclare const cluster: rds.DatabaseCluster;\nconst cpuUtilization = cluster.metricCPUUtilization();\n\n// The average amount of time taken per disk I/O operation (average over 1 minute)\nconst readLatency = instance.metric('ReadLatency', { statistic: 'Average', period: Duration.seconds(60) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 492
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-rds.DatabaseClusterBase#metricCPUUtilization",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#metric",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#metricDatabaseConnections",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The number of database connections in use (average over 5 minutes)\ndeclare const instance: rds.DatabaseInstance;\n\n// Average CPU utilization over 5 minutes\ndeclare const cluster: rds.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst dbConnections = instance.metricDatabaseConnections();\nconst cpuUtilization = cluster.metricCPUUtilization();\n\n// The average amount of time taken per disk I/O operation (average over 1 minute)\nconst readLatency = instance.metric('ReadLatency', { statistic: 'Average', period: Duration.seconds(60) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 19,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7857b12f16301c75810df1b5228431b01ba0493ac2f077d782de428f4e896b29"
    },
    "2167f47d68158b1a5a0147909de22d40be7e97327327ae4b90bef8aafe8e579a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3 as s3\n\n# vpc is of type Vpc\n\nimport_bucket = s3.Bucket(self, \"importbucket\")\nexport_bucket = s3.Bucket(self, \"exportbucket\")\nrds.DatabaseCluster(self, \"dbcluster\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    s3_import_buckets=[import_bucket],\n    s3_export_buckets=[export_bucket]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3;\n\nVpc vpc;\n\nBucket importBucket = new Bucket(this, \"importbucket\");\nBucket exportBucket = new Bucket(this, \"exportbucket\");\nnew DatabaseCluster(this, \"dbcluster\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    S3ImportBuckets = new [] { importBucket },\n    S3ExportBuckets = new [] { exportBucket }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.*;\n\nVpc vpc;\n\nBucket importBucket = new Bucket(this, \"importbucket\");\nBucket exportBucket = new Bucket(this, \"exportbucket\");\nDatabaseCluster.Builder.create(this, \"dbcluster\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .s3ImportBuckets(List.of(importBucket))\n        .s3ExportBuckets(List.of(exportBucket))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const vpc: ec2.Vpc;\nconst importBucket = new s3.Bucket(this, 'importbucket');\nconst exportBucket = new s3.Bucket(this, 'exportbucket');\nnew rds.DatabaseCluster(this, 'dbcluster', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: {\n    vpc,\n  },\n  s3ImportBuckets: [importBucket],\n  s3ExportBuckets: [exportBucket],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 525
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-s3.Bucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst importBucket = new s3.Bucket(this, 'importbucket');\nconst exportBucket = new s3.Bucket(this, 'exportbucket');\nnew rds.DatabaseCluster(this, 'dbcluster', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: {\n    vpc,\n  },\n  s3ImportBuckets: [importBucket],\n  s3ExportBuckets: [exportBucket],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 22,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 5,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c442f9207fbd515a5c37300340a27c2672cb533aeeec1a5d274971895f0c8555"
    },
    "21c4d8976003d6ef0f7d50a34db55ac245924c9d7aee264b91abac17ca2950c0": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# security_group is of type SecurityGroup\n# secrets is of type list of Secret\n# db_instance is of type DatabaseInstance\n\n\nproxy = db_instance.add_proxy(\"proxy\",\n    borrow_timeout=Duration.seconds(30),\n    max_connections_percent=50,\n    secrets=secrets,\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\nSecret[] secrets;\nDatabaseInstance dbInstance;\n\n\nDatabaseProxy proxy = dbInstance.AddProxy(\"proxy\", new DatabaseProxyOptions {\n    BorrowTimeout = Duration.Seconds(30),\n    MaxConnectionsPercent = 50,\n    Secrets = secrets,\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\nSecret[] secrets;\nDatabaseInstance dbInstance;\n\n\nDatabaseProxy proxy = dbInstance.addProxy(\"proxy\", DatabaseProxyOptions.builder()\n        .borrowTimeout(Duration.seconds(30))\n        .maxConnectionsPercent(50)\n        .secrets(secrets)\n        .vpc(vpc)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const secrets: secretsmanager.Secret[];\ndeclare const dbInstance: rds.DatabaseInstance;\n\nconst proxy = dbInstance.addProxy('proxy', {\n    borrowTimeout: Duration.seconds(30),\n    maxConnectionsPercent: 50,\n    secrets,\n    vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 548
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#addProxy",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxyOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const secrets: secretsmanager.Secret[];\ndeclare const dbInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst proxy = dbInstance.addProxy('proxy', {\n    borrowTimeout: Duration.seconds(30),\n    maxConnectionsPercent: 50,\n    secrets,\n    vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 21,
        "130": 4,
        "153": 4,
        "169": 4,
        "174": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "8fdc5eb3c4438dded334d59540e04c7f44d2d38bbfa9efff5955f7963b50412a"
    },
    "5e9a28e95785b1a003bbc4541b9191f20e9d9d7fef5d121458748239d12a0170": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs as logs\n# my_logs_publishing_role is of type Role\n# vpc is of type Vpc\n\n\n# Exporting logs from a cluster\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(\n        version=rds.AuroraEngineVersion.VER_1_17_9\n    ),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    cloudwatch_logs_exports=[\"error\", \"general\", \"slowquery\", \"audit\"],  # Export all available MySQL-based logs\n    cloudwatch_logs_retention=logs.RetentionDays.THREE_MONTHS,  # Optional - default is to never expire logs\n    cloudwatch_logs_retention_role=my_logs_publishing_role\n)\n\n# Exporting logs from an instance\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.postgres(\n        version=rds.PostgresEngineVersion.VER_12_3\n    ),\n    vpc=vpc,\n    cloudwatch_logs_exports=[\"postgresql\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs;\nRole myLogsPublishingRole;\nVpc vpc;\n\n\n// Exporting logs from a cluster\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps {\n        Version = AuroraEngineVersion.VER_1_17_9\n    }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    CloudwatchLogsExports = new [] { \"error\", \"general\", \"slowquery\", \"audit\" },  // Export all available MySQL-based logs\n    CloudwatchLogsRetention = RetentionDays.THREE_MONTHS,  // Optional - default is to never expire logs\n    CloudwatchLogsRetentionRole = myLogsPublishingRole\n});\n\n// Exporting logs from an instance\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps {\n        Version = PostgresEngineVersion.VER_12_3\n    }),\n    Vpc = vpc,\n    CloudwatchLogsExports = new [] { \"postgresql\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.*;\nRole myLogsPublishingRole;\nVpc vpc;\n\n\n// Exporting logs from a cluster\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder()\n                .version(AuroraEngineVersion.VER_1_17_9)\n                .build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .cloudwatchLogsExports(List.of(\"error\", \"general\", \"slowquery\", \"audit\")) // Export all available MySQL-based logs\n        .cloudwatchLogsRetention(RetentionDays.THREE_MONTHS) // Optional - default is to never expire logs\n        .cloudwatchLogsRetentionRole(myLogsPublishingRole)\n        .build();\n\n// Exporting logs from an instance\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder()\n                .version(PostgresEngineVersion.VER_12_3)\n                .build()))\n        .vpc(vpc)\n        .cloudwatchLogsExports(List.of(\"postgresql\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as logs from '@aws-cdk/aws-logs';\ndeclare const myLogsPublishingRole: iam.Role;\ndeclare const vpc: ec2.Vpc;\n\n// Exporting logs from a cluster\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({\n    version: rds.AuroraEngineVersion.VER_1_17_9, // different version class for each engine type\n  }),\n  instanceProps: {\n    vpc,\n  },\n  cloudwatchLogsExports: ['error', 'general', 'slowquery', 'audit'], // Export all available MySQL-based logs\n  cloudwatchLogsRetention: logs.RetentionDays.THREE_MONTHS, // Optional - default is to never expire logs\n  cloudwatchLogsRetentionRole: myLogsPublishingRole, // Optional - a role will be created if not provided\n  // ...\n});\n\n// Exporting logs from an instance\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.postgres({\n    version: rds.PostgresEngineVersion.VER_12_3,\n  }),\n  vpc,\n  cloudwatchLogsExports: ['postgresql'], // Export the PostgreSQL logs\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 568
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#THREE_MONTHS",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_17_9",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\ndeclare const myLogsPublishingRole: iam.Role;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Exporting logs from a cluster\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({\n    version: rds.AuroraEngineVersion.VER_1_17_9, // different version class for each engine type\n  }),\n  instanceProps: {\n    vpc,\n  },\n  cloudwatchLogsExports: ['error', 'general', 'slowquery', 'audit'], // Export all available MySQL-based logs\n  cloudwatchLogsRetention: logs.RetentionDays.THREE_MONTHS, // Optional - default is to never expire logs\n  cloudwatchLogsRetentionRole: myLogsPublishingRole, // Optional - a role will be created if not provided\n  // ...\n});\n\n// Exporting logs from an instance\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.postgres({\n    version: rds.PostgresEngineVersion.VER_12_3,\n  }),\n  vpc,\n  cloudwatchLogsExports: ['postgresql'], // Export the PostgreSQL logs\n  // ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 40,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 5,
        "194": 12,
        "196": 2,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "ee0eb81353def408c519aca4cd7c2390d249810d07ca70a22cc5fef939c41e1e"
    },
    "855cbe96faead6e93c19c1f4e239b2d4824dd0c106e2b11f6f5d376a088f600a": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# security_group is of type SecurityGroup\n\n\nrds.OptionGroup(self, \"Options\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(\n        version=rds.OracleEngineVersion.VER_19\n    ),\n    configurations=[rds.OptionConfiguration(\n        name=\"OEM\",\n        port=5500,\n        vpc=vpc,\n        security_groups=[security_group]\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\n\n\nnew OptionGroup(this, \"Options\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps {\n        Version = OracleEngineVersion.VER_19\n    }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 5500,\n        Vpc = vpc,\n        SecurityGroups = new [] { securityGroup }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\n\n\nOptionGroup.Builder.create(this, \"Options\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder()\n                .version(OracleEngineVersion.VER_19)\n                .build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(5500)\n                .vpc(vpc)\n                .securityGroups(List.of(securityGroup))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\n\nnew rds.OptionGroup(this, 'Options', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({\n    version: rds.OracleEngineVersion.VER_19,\n  }),\n  configurations: [\n    {\n      name: 'OEM',\n      port: 5500,\n      vpc,\n      securityGroups: [securityGroup], // Optional - a default group will be created if not provided.\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 604
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew rds.OptionGroup(this, 'Options', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({\n    version: rds.OracleEngineVersion.VER_19,\n  }),\n  configurations: [\n    {\n      name: 'OEM',\n      port: 5500,\n      vpc,\n      securityGroups: [securityGroup], // Optional - a default group will be created if not provided.\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 22,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e9774594958b270e9336e91c18ae23abf17ed29db8145d28bd6fae2486aebac3"
    },
    "b02f4360c1f17a10437ae6b7a4827bf14f9078f33d5ade40757299e801e7b1b1": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n    parameter_group=rds.ParameterGroup.from_parameter_group_name(self, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    vpc=vpc,\n    scaling=rds.ServerlessScalingOptions(\n        auto_pause=Duration.minutes(10),  # default is to pause after 5 minutes of idle time\n        min_capacity=rds.AuroraCapacityUnit.ACU_8,  # default is 2 Aurora capacity units (ACUs)\n        max_capacity=rds.AuroraCapacityUnit.ACU_32\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_POSTGRESQL,\n    ParameterGroup = ParameterGroup.FromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    Vpc = vpc,\n    Scaling = new ServerlessScalingOptions {\n        AutoPause = Duration.Minutes(10),  // default is to pause after 5 minutes of idle time\n        MinCapacity = AuroraCapacityUnit.ACU_8,  // default is 2 Aurora capacity units (ACUs)\n        MaxCapacity = AuroraCapacityUnit.ACU_32\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_POSTGRESQL)\n        .parameterGroup(ParameterGroup.fromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"))\n        .vpc(vpc)\n        .scaling(ServerlessScalingOptions.builder()\n                .autoPause(Duration.minutes(10)) // default is to pause after 5 minutes of idle time\n                .minCapacity(AuroraCapacityUnit.ACU_8) // default is 2 Aurora capacity units (ACUs)\n                .maxCapacity(AuroraCapacityUnit.ACU_32)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 634
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraCapacityUnit",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_32",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_8",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_POSTGRESQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup#fromParameterGroupName",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-rds.ServerlessScalingOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 10,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "798a4563fd2efb0e433d25b55b22ca50a99e1abbc4a76344ee3997b9f34eb6fd"
    },
    "802d8e06e273b33f5fb69965b88765bd2d0b6d2e020cbf307447cdb905fb41bf": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n# code is of type Code\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    enable_data_api=True\n)\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=code,\n    environment={\n        \"CLUSTER_ARN\": cluster.cluster_arn,\n        \"SECRET_ARN\": cluster.secret.secret_arn\n    }\n)\ncluster.grant_data_api_access(fn)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nCode code;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    EnableDataApi = true\n});\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = code,\n    Environment = new Dictionary<string, string> {\n        { \"CLUSTER_ARN\", cluster.ClusterArn },\n        { \"SECRET_ARN\", cluster.Secret.SecretArn }\n    }\n});\ncluster.GrantDataApiAccess(fn);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nCode code;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .enableDataApi(true)\n        .build();\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(code)\n        .environment(Map.of(\n                \"CLUSTER_ARN\", cluster.getClusterArn(),\n                \"SECRET_ARN\", cluster.getSecret().getSecretArn()))\n        .build();\ncluster.grantDataApiAccess(fn);",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  enableDataApi: true, // Optional - will be automatically set if you call grantDataApiAccess()\n});\n\ndeclare const code: lambda.Code;\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code,\n  environment: {\n    CLUSTER_ARN: cluster.clusterArn,\n    SECRET_ARN: cluster.secret!.secretArn,\n  },\n});\ncluster.grantDataApiAccess(fn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-rds"
        },
        "field": {
          "field": "markdown",
          "line": 674
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessCluster#secret",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-secretsmanager.ISecret#secretArn"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const code: lambda.Code;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  enableDataApi: true, // Optional - will be automatically set if you call grantDataApiAccess()\n});\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code,\n  environment: {\n    CLUSTER_ARN: cluster.clusterArn,\n    SECRET_ARN: cluster.secret!.secretArn,\n  },\n});\ncluster.grantDataApiAccess(fn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 35,
        "104": 2,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 10,
        "196": 1,
        "197": 2,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 7,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "55f008ebed0d6657b08427cbf1df38d5c68c60433707b2a57612d84192a1bf34"
    },
    "cbb875eb1b1043498dfcef9821f81458a5b379acbb40ce9389db02c51b815ed3": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n    parameter_group=rds.ParameterGroup.from_parameter_group_name(self, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    vpc=vpc,\n    scaling=rds.ServerlessScalingOptions(\n        auto_pause=Duration.minutes(10),  # default is to pause after 5 minutes of idle time\n        min_capacity=rds.AuroraCapacityUnit.ACU_8,  # default is 2 Aurora capacity units (ACUs)\n        max_capacity=rds.AuroraCapacityUnit.ACU_32\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_POSTGRESQL,\n    ParameterGroup = ParameterGroup.FromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    Vpc = vpc,\n    Scaling = new ServerlessScalingOptions {\n        AutoPause = Duration.Minutes(10),  // default is to pause after 5 minutes of idle time\n        MinCapacity = AuroraCapacityUnit.ACU_8,  // default is 2 Aurora capacity units (ACUs)\n        MaxCapacity = AuroraCapacityUnit.ACU_32\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_POSTGRESQL)\n        .parameterGroup(ParameterGroup.fromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"))\n        .vpc(vpc)\n        .scaling(ServerlessScalingOptions.builder()\n                .autoPause(Duration.minutes(10)) // default is to pause after 5 minutes of idle time\n                .minCapacity(AuroraCapacityUnit.ACU_8) // default is 2 Aurora capacity units (ACUs)\n                .maxCapacity(AuroraCapacityUnit.ACU_32)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraCapacityUnit"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraCapacityUnit",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_32",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_8",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_POSTGRESQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup#fromParameterGroupName",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-rds.ServerlessScalingOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 10,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "798a4563fd2efb0e433d25b55b22ca50a99e1abbc4a76344ee3997b9f34eb6fd"
    },
    "aaf0ca1e92e441789c1470e50f189eab1919e3c6a3ba3a2ebd66dd7fd99b7bec": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nrds.DatabaseClusterFromSnapshot(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(version=rds.AuroraEngineVersion.VER_1_22_2),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew DatabaseClusterFromSnapshot(this, \"Database\", new DatabaseClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps { Version = AuroraEngineVersion.VER_1_22_2 }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseClusterFromSnapshot.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder().version(AuroraEngineVersion.VER_1_22_2).build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraClusterEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_22_2",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshotProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b4f86f5aeba11e5ec90f8f38aaa0189a946cde1427942d192927328b7222efc0"
    },
    "410400f5a652524d8636724eee99600ad2ea921ad8bcb9576ced80728bfe1147": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nrds.DatabaseClusterFromSnapshot(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(version=rds.AuroraEngineVersion.VER_1_22_2),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew DatabaseClusterFromSnapshot(this, \"Database\", new DatabaseClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps { Version = AuroraEngineVersion.VER_1_22_2 }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseClusterFromSnapshot.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder().version(AuroraEngineVersion.VER_1_22_2).build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_22_2",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshotProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b4f86f5aeba11e5ec90f8f38aaa0189a946cde1427942d192927328b7222efc0"
    },
    "95d3e3cc1604b8e5623daeac68bd48f71c8e101796c916a820bd5efc2c3a3ea5": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora_mysql(version=rds.AuroraMysqlEngineVersion.VER_2_08_1),\n    credentials=rds.Credentials.from_generated_secret(\"clusteradmin\"),  # Optional - will default to 'admin' username and generated password\n    instance_props=rds.InstanceProps(\n        # optional , defaults to t3.medium\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n        vpc_subnets=ec2.SubnetSelection(\n            subnet_type=ec2.SubnetType.PRIVATE\n        ),\n        vpc=vpc\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AuroraMysql(new AuroraMysqlClusterEngineProps { Version = AuroraMysqlEngineVersion.VER_2_08_1 }),\n    Credentials = Credentials.FromGeneratedSecret(\"clusteradmin\"),  // Optional - will default to 'admin' username and generated password\n    InstanceProps = new InstanceProps {\n        // optional , defaults to t3.medium\n        InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.SMALL),\n        VpcSubnets = new SubnetSelection {\n            SubnetType = SubnetType.PRIVATE\n        },\n        Vpc = vpc\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.auroraMysql(AuroraMysqlClusterEngineProps.builder().version(AuroraMysqlEngineVersion.VER_2_08_1).build()))\n        .credentials(Credentials.fromGeneratedSecret(\"clusteradmin\")) // Optional - will default to 'admin' username and generated password\n        .instanceProps(InstanceProps.builder()\n                // optional , defaults to t3.medium\n                .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.SMALL))\n                .vpcSubnets(SubnetSelection.builder()\n                        .subnetType(SubnetType.PRIVATE)\n                        .build())\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password\n  instanceProps: {\n    // optional , defaults to t3.medium\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    vpc,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraMysqlClusterEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.AuroraMysqlClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion#VER_2_08_1",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#auroraMysql",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password\n  instanceProps: {\n    // optional , defaults to t3.medium\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    vpc,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 35,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 15,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c53df0cc881dd43319a5351a927046b4bc963497b518929ca906fe87c39018f7"
    },
    "a73f6268c3612382b9d12df6a3a51955fbc3a72c73255714657b2c3b2e46c949": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora_mysql(version=rds.AuroraMysqlEngineVersion.VER_2_08_1),\n    credentials=rds.Credentials.from_generated_secret(\"clusteradmin\"),  # Optional - will default to 'admin' username and generated password\n    instance_props=rds.InstanceProps(\n        # optional , defaults to t3.medium\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n        vpc_subnets=ec2.SubnetSelection(\n            subnet_type=ec2.SubnetType.PRIVATE\n        ),\n        vpc=vpc\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AuroraMysql(new AuroraMysqlClusterEngineProps { Version = AuroraMysqlEngineVersion.VER_2_08_1 }),\n    Credentials = Credentials.FromGeneratedSecret(\"clusteradmin\"),  // Optional - will default to 'admin' username and generated password\n    InstanceProps = new InstanceProps {\n        // optional , defaults to t3.medium\n        InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.SMALL),\n        VpcSubnets = new SubnetSelection {\n            SubnetType = SubnetType.PRIVATE\n        },\n        Vpc = vpc\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.auroraMysql(AuroraMysqlClusterEngineProps.builder().version(AuroraMysqlEngineVersion.VER_2_08_1).build()))\n        .credentials(Credentials.fromGeneratedSecret(\"clusteradmin\")) // Optional - will default to 'admin' username and generated password\n        .instanceProps(InstanceProps.builder()\n                // optional , defaults to t3.medium\n                .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.SMALL))\n                .vpcSubnets(SubnetSelection.builder()\n                        .subnetType(SubnetType.PRIVATE)\n                        .build())\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password\n  instanceProps: {\n    // optional , defaults to t3.medium\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    vpc,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.AuroraMysqlEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.AuroraMysqlClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion",
        "@aws-cdk/aws-rds.AuroraMysqlEngineVersion#VER_2_08_1",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#auroraMysql",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password\n  instanceProps: {\n    // optional , defaults to t3.medium\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE,\n    },\n    vpc,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 35,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 15,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c53df0cc881dd43319a5351a927046b4bc963497b518929ca906fe87c39018f7"
    },
    "d5e28d50b4f9e63ebe8eac1bf4bb4a8c36cb34ddc71dafce5fffecf01ac7062f": {
      "translations": {
        "python": {
          "source": "# Build a data source for AppSync to access the database.\n# api is of type GraphqlApi\n# Create username and password secret for DB Cluster\nsecret = rds.DatabaseSecret(self, \"AuroraSecret\",\n    username=\"clusteradmin\"\n)\n\n# The VPC to place the cluster in\nvpc = ec2.Vpc(self, \"AuroraVpc\")\n\n# Create the serverless cluster, provide all values needed to customise the database.\ncluster = rds.ServerlessCluster(self, \"AuroraCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    credentials={\"username\": \"clusteradmin\"},\n    cluster_identifier=\"db-endpoint-test\",\n    default_database_name=\"demos\"\n)\nrds_dS = api.add_rds_data_source(\"rds\", cluster, secret, \"demos\")\n\n# Set up a resolver for an RDS query.\nrds_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemosRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"SELECT * FROM demos\"\n            ]\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n          \"\"\")\n)\n\n# Set up a resolver for an RDS mutation.\nrds_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemoRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"INSERT INTO demos VALUES (:id, :version)\",\n              \"SELECT * WHERE id = :id\"\n            ],\n            \"variableMap\": {\n              \":id\": $util.toJson($util.autoId()),\n              \":version\": $util.toJson($ctx.args.version)\n            }\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n          \"\"\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = new DatabaseSecret(this, \"AuroraSecret\", new DatabaseSecretProps {\n    Username = \"clusteradmin\"\n});\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = new ServerlessCluster(this, \"AuroraCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    Credentials = new Dictionary<string, string> { { \"username\", \"clusteradmin\" } },\n    ClusterIdentifier = \"db-endpoint-test\",\n    DefaultDatabaseName = \"demos\"\n});\nRdsDataSource rdsDS = api.AddRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemosRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"SELECT * FROM demos\"\"\n        ]\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n      \")\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemoRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"INSERT INTO demos VALUES (:id, :version)\"\",\n          \"\"SELECT * WHERE id = :id\"\"\n        ],\n        \"\"variableMap\"\": {\n          \"\":id\"\": $util.toJson($util.autoId()),\n          \"\":version\"\": $util.toJson($ctx.args.version)\n        }\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n      \")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = DatabaseSecret.Builder.create(this, \"AuroraSecret\")\n        .username(\"clusteradmin\")\n        .build();\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AuroraCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .credentials(Map.of(\"username\", \"clusteradmin\"))\n        .clusterIdentifier(\"db-endpoint-test\")\n        .defaultDatabaseName(\"demos\")\n        .build();\nRdsDataSource rdsDS = api.addRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemosRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \"))\n        .build());\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemoRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.Credentials"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addRdsDataSource",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync.RdsDataSource",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.DatabaseSecret",
        "@aws-cdk/aws-rds.DatabaseSecretProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "14": 4,
        "75": 51,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 16,
        "196": 7,
        "197": 3,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 14,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "d095c91d8019a9f1955b6282cb3856b082495570d0303ff75ffe575c4f02c16e"
    },
    "cb27022b8adc1af70a5902e48213b29c3c6cee8d9288aab4c0e05bbb580dc949": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nmy_key = kms.Key(self, \"MyKey\")\n\nrds.DatabaseInstance(self, \"InstanceWithCustomizedSecret\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\",\n        secret_name=\"my-cool-name\",\n        encryption_key=my_key,\n        exclude_characters=\"!&*^#@()\",\n        replica_regions=[secretsmanager.ReplicaRegion(region=\"eu-west-1\"), secretsmanager.ReplicaRegion(region=\"eu-west-2\")]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nKey myKey = new Key(this, \"MyKey\");\n\nnew DatabaseInstance(this, \"InstanceWithCustomizedSecret\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\", new CredentialsBaseOptions {\n        SecretName = \"my-cool-name\",\n        EncryptionKey = myKey,\n        ExcludeCharacters = \"!&*^#@()\",\n        ReplicaRegions = new [] { new ReplicaRegion { Region = \"eu-west-1\" }, new ReplicaRegion { Region = \"eu-west-2\" } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nKey myKey = new Key(this, \"MyKey\");\n\nDatabaseInstance.Builder.create(this, \"InstanceWithCustomizedSecret\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\", CredentialsBaseOptions.builder()\n                .secretName(\"my-cool-name\")\n                .encryptionKey(myKey)\n                .excludeCharacters(\"!&*^#@()\")\n                .replicaRegions(List.of(ReplicaRegion.builder().region(\"eu-west-1\").build(), ReplicaRegion.builder().region(\"eu-west-2\").build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.CredentialsBaseOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.CredentialsBaseOptions",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 29,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "6cb8af87d342425614fa54ef9d4d6f59badbe4a5a222c9eb62191febd45571cc"
    },
    "fc0653096a36167bba40734055a510533200f50a441361083afdf59d23d2d2a4": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7f39c98e8008c24bc0976a97c9a92a3fcf57bba44e06e5dca80b5121edbb6b98"
    },
    "97c364d678b4e366f5587c75d82360fdf2a85c47f8bdaab5db1fe43c1354b38a": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n    parameter_group=rds.ParameterGroup.from_parameter_group_name(self, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    vpc=vpc,\n    scaling=rds.ServerlessScalingOptions(\n        auto_pause=Duration.minutes(10),  # default is to pause after 5 minutes of idle time\n        min_capacity=rds.AuroraCapacityUnit.ACU_8,  # default is 2 Aurora capacity units (ACUs)\n        max_capacity=rds.AuroraCapacityUnit.ACU_32\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_POSTGRESQL,\n    ParameterGroup = ParameterGroup.FromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    Vpc = vpc,\n    Scaling = new ServerlessScalingOptions {\n        AutoPause = Duration.Minutes(10),  // default is to pause after 5 minutes of idle time\n        MinCapacity = AuroraCapacityUnit.ACU_8,  // default is 2 Aurora capacity units (ACUs)\n        MaxCapacity = AuroraCapacityUnit.ACU_32\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_POSTGRESQL)\n        .parameterGroup(ParameterGroup.fromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"))\n        .vpc(vpc)\n        .scaling(ServerlessScalingOptions.builder()\n                .autoPause(Duration.minutes(10)) // default is to pause after 5 minutes of idle time\n                .minCapacity(AuroraCapacityUnit.ACU_8) // default is 2 Aurora capacity units (ACUs)\n                .maxCapacity(AuroraCapacityUnit.ACU_32)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseClusterEngine"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraCapacityUnit",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_32",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_8",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_POSTGRESQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup#fromParameterGroupName",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-rds.ServerlessScalingOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 10,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "798a4563fd2efb0e433d25b55b22ca50a99e1abbc4a76344ee3997b9f34eb6fd"
    },
    "2a159dfe87ddde61416015e88d74cf83bcc8a59b87c08fbadce6b010381a64eb": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nrds.DatabaseClusterFromSnapshot(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(version=rds.AuroraEngineVersion.VER_1_22_2),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew DatabaseClusterFromSnapshot(this, \"Database\", new DatabaseClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps { Version = AuroraEngineVersion.VER_1_22_2 }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseClusterFromSnapshot.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder().version(AuroraEngineVersion.VER_1_22_2).build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseClusterFromSnapshot"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_22_2",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshotProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b4f86f5aeba11e5ec90f8f38aaa0189a946cde1427942d192927328b7222efc0"
    },
    "f81d49249c235b47d7ff0faf7975a2b649365122ced9de194b62b44c0c2cab74": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nrds.DatabaseClusterFromSnapshot(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(version=rds.AuroraEngineVersion.VER_1_22_2),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    snapshot_identifier=\"mySnapshot\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nnew DatabaseClusterFromSnapshot(this, \"Database\", new DatabaseClusterFromSnapshotProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps { Version = AuroraEngineVersion.VER_1_22_2 }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    SnapshotIdentifier = \"mySnapshot\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseClusterFromSnapshot.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder().version(AuroraEngineVersion.VER_1_22_2).build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .snapshotIdentifier(\"mySnapshot\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseClusterFromSnapshotProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_22_2",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseClusterFromSnapshotProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.InstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseClusterFromSnapshot(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: 'mySnapshot',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b4f86f5aeba11e5ec90f8f38aaa0189a946cde1427942d192927328b7222efc0"
    },
    "dae439d13d52fe2a14c91d2e25c03b58fd2f47a4574e32f7b2a06d52bfc61a53": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7f39c98e8008c24bc0976a97c9a92a3fcf57bba44e06e5dca80b5121edbb6b98"
    },
    "2412b9df5ead47d238839a3b7bb98c955e1fa6b3c2b8ff4987d05066e089aba9": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nrds.DatabaseInstance(self, \"InstanceWithUsername\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\")\n)\n\nrds.DatabaseInstance(self, \"InstanceWithUsernameAndPassword\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_password(\"postgres\", SecretValue.ssm_secure(\"/dbPassword\", \"1\"))\n)\n\nmy_secret = secretsmanager.Secret.from_secret_name(self, \"DBSecret\", \"myDBLoginInfo\")\nrds.DatabaseInstance(self, \"InstanceWithSecretLogin\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_secret(my_secret)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nnew DatabaseInstance(this, \"InstanceWithUsername\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\")\n});\n\nnew DatabaseInstance(this, \"InstanceWithUsernameAndPassword\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromPassword(\"postgres\", SecretValue.SsmSecure(\"/dbPassword\", \"1\"))\n});\n\nISecret mySecret = Secret.FromSecretName(this, \"DBSecret\", \"myDBLoginInfo\");\nnew DatabaseInstance(this, \"InstanceWithSecretLogin\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromSecret(mySecret)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nDatabaseInstance.Builder.create(this, \"InstanceWithUsername\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\"))\n        .build();\n\nDatabaseInstance.Builder.create(this, \"InstanceWithUsernameAndPassword\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromPassword(\"postgres\", SecretValue.ssmSecure(\"/dbPassword\", \"1\")))\n        .build();\n\nISecret mySecret = Secret.fromSecretName(this, \"DBSecret\", \"myDBLoginInfo\");\nDatabaseInstance.Builder.create(this, \"InstanceWithSecretLogin\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromSecret(mySecret))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nnew rds.DatabaseInstance(this, 'InstanceWithUsername', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres'), // Creates an admin user of postgres with a generated password\n});\n\nnew rds.DatabaseInstance(this, 'InstanceWithUsernameAndPassword', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromPassword('postgres', SecretValue.ssmSecure('/dbPassword', '1')), // Use password from SSM\n});\n\nconst mySecret = secretsmanager.Secret.fromSecretName(this, 'DBSecret', 'myDBLoginInfo');\nnew rds.DatabaseInstance(this, 'InstanceWithSecretLogin', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromSecret(mySecret), // Get both username and password from existing secret\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.Credentials#fromPassword",
        "@aws-cdk/aws-rds.Credentials#fromSecret",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretName",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#ssmSecure"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nnew rds.DatabaseInstance(this, 'InstanceWithUsername', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres'), // Creates an admin user of postgres with a generated password\n});\n\nnew rds.DatabaseInstance(this, 'InstanceWithUsernameAndPassword', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromPassword('postgres', SecretValue.ssmSecure('/dbPassword', '1')), // Use password from SSM\n});\n\nconst mySecret = secretsmanager.Secret.fromSecretName(this, 'DBSecret', 'myDBLoginInfo');\nnew rds.DatabaseInstance(this, 'InstanceWithSecretLogin', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromSecret(mySecret), // Get both username and password from existing secret\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 42,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 16,
        "196": 6,
        "197": 3,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 6,
        "290": 1
      },
      "fqnsFingerprint": "43b14dc9a6e2beda555d249eb6fa627185eeec858ff700c51a2a1c79ecbbce8f"
    },
    "0fbc87006061fe1aea554a597dbdd1335baec5ecff24cf509b4a25f21cfd5ca8": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n# source_instance is of type DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceEngine"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "00e73ec9c0df9f77c67b4e12151f3233a1c325df424515ed8a415bcee3e17404"
    },
    "eefb49f3cf5cf844dc2c8a785ab29064a42ec67917e4826116904e9193cda8b9": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n# source_instance is of type DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "00e73ec9c0df9f77c67b4e12151f3233a1c325df424515ed8a415bcee3e17404"
    },
    "0e19e3dbd819a901eeba69ec3034de4a3ae5927fc26a388197207922e8b329fa": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n# source_instance is of type DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "00e73ec9c0df9f77c67b4e12151f3233a1c325df424515ed8a415bcee3e17404"
    },
    "4402a8ecc999a8449ca35fbb05212eccc3d9318d49d77df9de2985ab5274e5f6": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nrds.DatabaseInstance(self, \"InstanceWithUsername\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\")\n)\n\nrds.DatabaseInstance(self, \"InstanceWithUsernameAndPassword\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_password(\"postgres\", SecretValue.ssm_secure(\"/dbPassword\", \"1\"))\n)\n\nmy_secret = secretsmanager.Secret.from_secret_name(self, \"DBSecret\", \"myDBLoginInfo\")\nrds.DatabaseInstance(self, \"InstanceWithSecretLogin\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_secret(my_secret)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nnew DatabaseInstance(this, \"InstanceWithUsername\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\")\n});\n\nnew DatabaseInstance(this, \"InstanceWithUsernameAndPassword\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromPassword(\"postgres\", SecretValue.SsmSecure(\"/dbPassword\", \"1\"))\n});\n\nISecret mySecret = Secret.FromSecretName(this, \"DBSecret\", \"myDBLoginInfo\");\nnew DatabaseInstance(this, \"InstanceWithSecretLogin\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromSecret(mySecret)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nDatabaseInstance.Builder.create(this, \"InstanceWithUsername\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\"))\n        .build();\n\nDatabaseInstance.Builder.create(this, \"InstanceWithUsernameAndPassword\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromPassword(\"postgres\", SecretValue.ssmSecure(\"/dbPassword\", \"1\")))\n        .build();\n\nISecret mySecret = Secret.fromSecretName(this, \"DBSecret\", \"myDBLoginInfo\");\nDatabaseInstance.Builder.create(this, \"InstanceWithSecretLogin\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromSecret(mySecret))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nnew rds.DatabaseInstance(this, 'InstanceWithUsername', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres'), // Creates an admin user of postgres with a generated password\n});\n\nnew rds.DatabaseInstance(this, 'InstanceWithUsernameAndPassword', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromPassword('postgres', SecretValue.ssmSecure('/dbPassword', '1')), // Use password from SSM\n});\n\nconst mySecret = secretsmanager.Secret.fromSecretName(this, 'DBSecret', 'myDBLoginInfo');\nnew rds.DatabaseInstance(this, 'InstanceWithSecretLogin', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromSecret(mySecret), // Get both username and password from existing secret\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.Credentials#fromPassword",
        "@aws-cdk/aws-rds.Credentials#fromSecret",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretName",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#ssmSecure"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nnew rds.DatabaseInstance(this, 'InstanceWithUsername', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres'), // Creates an admin user of postgres with a generated password\n});\n\nnew rds.DatabaseInstance(this, 'InstanceWithUsernameAndPassword', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromPassword('postgres', SecretValue.ssmSecure('/dbPassword', '1')), // Use password from SSM\n});\n\nconst mySecret = secretsmanager.Secret.fromSecretName(this, 'DBSecret', 'myDBLoginInfo');\nnew rds.DatabaseInstance(this, 'InstanceWithSecretLogin', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromSecret(mySecret), // Get both username and password from existing secret\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 42,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 16,
        "196": 6,
        "197": 3,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 6,
        "290": 1
      },
      "fqnsFingerprint": "43b14dc9a6e2beda555d249eb6fa627185eeec858ff700c51a2a1c79ecbbce8f"
    },
    "6206de6b6316a54acdb7f168672f3810ac5b55da6ccf4cbaf36d0a7b250751e0": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n# source_instance is of type DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceReadReplica"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "00e73ec9c0df9f77c67b4e12151f3233a1c325df424515ed8a415bcee3e17404"
    },
    "3b53b977245d100f6ec719f2f5c4f2f9eef59e9c0059bddd225e61a4e26a1bb4": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n# source_instance is of type DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "00e73ec9c0df9f77c67b4e12151f3233a1c325df424515ed8a415bcee3e17404"
    },
    "b926197bac19936989cb0ec509c780aaa556d0fa5cdeff480478bf8d388550ae": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseProxy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7f39c98e8008c24bc0976a97c9a92a3fcf57bba44e06e5dca80b5121edbb6b98"
    },
    "c1df6258c0db0dfd8fbcfbad8984dca252ac16c56f7f0c0742d336edb400ada2": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# security_group is of type SecurityGroup\n# secrets is of type list of Secret\n# db_instance is of type DatabaseInstance\n\n\nproxy = db_instance.add_proxy(\"proxy\",\n    borrow_timeout=Duration.seconds(30),\n    max_connections_percent=50,\n    secrets=secrets,\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\nSecret[] secrets;\nDatabaseInstance dbInstance;\n\n\nDatabaseProxy proxy = dbInstance.AddProxy(\"proxy\", new DatabaseProxyOptions {\n    BorrowTimeout = Duration.Seconds(30),\n    MaxConnectionsPercent = 50,\n    Secrets = secrets,\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\nSecret[] secrets;\nDatabaseInstance dbInstance;\n\n\nDatabaseProxy proxy = dbInstance.addProxy(\"proxy\", DatabaseProxyOptions.builder()\n        .borrowTimeout(Duration.seconds(30))\n        .maxConnectionsPercent(50)\n        .secrets(secrets)\n        .vpc(vpc)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const secrets: secretsmanager.Secret[];\ndeclare const dbInstance: rds.DatabaseInstance;\n\nconst proxy = dbInstance.addProxy('proxy', {\n    borrowTimeout: Duration.seconds(30),\n    maxConnectionsPercent: 50,\n    secrets,\n    vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseProxyOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#addProxy",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxyOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const secrets: secretsmanager.Secret[];\ndeclare const dbInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst proxy = dbInstance.addProxy('proxy', {\n    borrowTimeout: Duration.seconds(30),\n    maxConnectionsPercent: 50,\n    secrets,\n    vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 21,
        "130": 4,
        "153": 4,
        "169": 4,
        "174": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "8fdc5eb3c4438dded334d59540e04c7f44d2d38bbfa9efff5955f7963b50412a"
    },
    "c09c3a69a4fe610e55d3e9c48f3260c73ccd97977dc9233c4e7ebeb054e52f9c": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseProxyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7f39c98e8008c24bc0976a97c9a92a3fcf57bba44e06e5dca80b5121edbb6b98"
    },
    "dbd5083f92393299692754e017283bd7da434eb3ec029cbaa207a85874c1b019": {
      "translations": {
        "python": {
          "source": "# instance is of type DatabaseInstance\n\nmy_user_secret = rds.DatabaseSecret(self, \"MyUserSecret\",\n    username=\"myuser\",\n    secret_name=\"my-user-secret\",  # optional, defaults to a CloudFormation-generated name\n    master_secret=instance.secret,\n    exclude_characters=\"{}[]()'\\\"/\\\\\"\n)\nmy_user_secret_attached = my_user_secret.attach(instance) # Adds DB connections information in the secret\n\ninstance.add_rotation_multi_user(\"MyUser\",  # Add rotation using the multi user scheme\n    secret=my_user_secret_attached)",
          "version": "1"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\n\nDatabaseSecret myUserSecret = new DatabaseSecret(this, \"MyUserSecret\", new DatabaseSecretProps {\n    Username = \"myuser\",\n    SecretName = \"my-user-secret\",  // optional, defaults to a CloudFormation-generated name\n    MasterSecret = instance.Secret,\n    ExcludeCharacters = \"{}[]()'\\\"/\\\\\"\n});\nISecret myUserSecretAttached = myUserSecret.Attach(instance); // Adds DB connections information in the secret\n\ninstance.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {  // Add rotation using the multi user scheme\n    Secret = myUserSecretAttached });",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\n\nDatabaseSecret myUserSecret = DatabaseSecret.Builder.create(this, \"MyUserSecret\")\n        .username(\"myuser\")\n        .secretName(\"my-user-secret\") // optional, defaults to a CloudFormation-generated name\n        .masterSecret(instance.getSecret())\n        .excludeCharacters(\"{}[]()'\\\"/\\\\\")\n        .build();\nISecret myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder() // Add rotation using the multi user scheme\n        .secret(myUserSecretAttached).build());",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\nconst myUserSecret = new rds.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  secretName: 'my-user-secret', // optional, defaults to a CloudFormation-generated name\n  masterSecret: instance.secret,\n  excludeCharacters: '{}[]()\\'\"/\\\\', // defaults to the set \" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\nconst myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseSecret"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseInstance#secret",
        "@aws-cdk/aws-rds.DatabaseSecret",
        "@aws-cdk/aws-rds.DatabaseSecretProps",
        "@aws-cdk/aws-rds.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ISecretAttachmentTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myUserSecret = new rds.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  secretName: 'my-user-secret', // optional, defaults to a CloudFormation-generated name\n  masterSecret: instance.secret,\n  excludeCharacters: '{}[]()\\'\"/\\\\', // defaults to the set \" %+~`#/// here*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\nconst myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ae10c65e8da796825ec2f3b70ca929a0de79657559371fdb28caaeef5382543b"
    },
    "918ce3402efd98e96221c7a42bae2b41a560903bc64b1a4fab9f8c68b6913dca": {
      "translations": {
        "python": {
          "source": "# instance is of type DatabaseInstance\n\nmy_user_secret = rds.DatabaseSecret(self, \"MyUserSecret\",\n    username=\"myuser\",\n    secret_name=\"my-user-secret\",  # optional, defaults to a CloudFormation-generated name\n    master_secret=instance.secret,\n    exclude_characters=\"{}[]()'\\\"/\\\\\"\n)\nmy_user_secret_attached = my_user_secret.attach(instance) # Adds DB connections information in the secret\n\ninstance.add_rotation_multi_user(\"MyUser\",  # Add rotation using the multi user scheme\n    secret=my_user_secret_attached)",
          "version": "1"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\n\nDatabaseSecret myUserSecret = new DatabaseSecret(this, \"MyUserSecret\", new DatabaseSecretProps {\n    Username = \"myuser\",\n    SecretName = \"my-user-secret\",  // optional, defaults to a CloudFormation-generated name\n    MasterSecret = instance.Secret,\n    ExcludeCharacters = \"{}[]()'\\\"/\\\\\"\n});\nISecret myUserSecretAttached = myUserSecret.Attach(instance); // Adds DB connections information in the secret\n\ninstance.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {  // Add rotation using the multi user scheme\n    Secret = myUserSecretAttached });",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\n\nDatabaseSecret myUserSecret = DatabaseSecret.Builder.create(this, \"MyUserSecret\")\n        .username(\"myuser\")\n        .secretName(\"my-user-secret\") // optional, defaults to a CloudFormation-generated name\n        .masterSecret(instance.getSecret())\n        .excludeCharacters(\"{}[]()'\\\"/\\\\\")\n        .build();\nISecret myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder() // Add rotation using the multi user scheme\n        .secret(myUserSecretAttached).build());",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\nconst myUserSecret = new rds.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  secretName: 'my-user-secret', // optional, defaults to a CloudFormation-generated name\n  masterSecret: instance.secret,\n  excludeCharacters: '{}[]()\\'\"/\\\\', // defaults to the set \" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\nconst myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.DatabaseSecretProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.DatabaseInstance#secret",
        "@aws-cdk/aws-rds.DatabaseSecret",
        "@aws-cdk/aws-rds.DatabaseSecretProps",
        "@aws-cdk/aws-rds.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ISecretAttachmentTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myUserSecret = new rds.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  secretName: 'my-user-secret', // optional, defaults to a CloudFormation-generated name\n  masterSecret: instance.secret,\n  excludeCharacters: '{}[]()\\'\"/\\\\', // defaults to the set \" %+~`#/// here*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\nconst myUserSecretAttached = myUserSecret.attach(instance); // Adds DB connections information in the secret\n\ninstance.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ae10c65e8da796825ec2f3b70ca929a0de79657559371fdb28caaeef5382543b"
    },
    "83e56feeab9fa436d21f6e39f839e28cfcbb136e05ded383772864d52b355148": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.InstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7f39c98e8008c24bc0976a97c9a92a3fcf57bba44e06e5dca80b5121edbb6b98"
    },
    "cd52d73791973ca18f3eb1a48587ae57ba773d40c6f2501460b3b1fc404fb0d4": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.LicenseModel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#metricCPUUtilization",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "fd8cb77cd8a244c784a0100970986f664aad034cbd1a7aa0129ef8b0cef58bc5"
    },
    "61c8d5bada7ae367023a856a468625f50eaf4733e6a69959c65ef31afac389d0": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nrole = iam.Role(self, \"RDSDirectoryServicesRole\",\n    assumed_by=iam.ServicePrincipal(\"rds.amazonaws.com\"),\n    managed_policies=[\n        iam.ManagedPolicy.from_aws_managed_policy_name(\"service-role/AmazonRDSDirectoryServiceAccess\")\n    ]\n)\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.mysql(version=rds.MysqlEngineVersion.VER_8_0_19),\n    vpc=vpc,\n    domain=\"d-????????\",  # The ID of the domain for the instance to join.\n    domain_role=role\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nRole role = new Role(this, \"RDSDirectoryServicesRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"rds.amazonaws.com\"),\n    ManagedPolicies = new [] { ManagedPolicy.FromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\") }\n});\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Mysql(new MySqlInstanceEngineProps { Version = MysqlEngineVersion.VER_8_0_19 }),\n    Vpc = vpc,\n    Domain = \"d-????????\",  // The ID of the domain for the instance to join.\n    DomainRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nRole role = Role.Builder.create(this, \"RDSDirectoryServicesRole\")\n        .assumedBy(new ServicePrincipal(\"rds.amazonaws.com\"))\n        .managedPolicies(List.of(ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\")))\n        .build();\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.mysql(MySqlInstanceEngineProps.builder().version(MysqlEngineVersion.VER_8_0_19).build()))\n        .vpc(vpc)\n        .domain(\"d-????????\") // The ID of the domain for the instance to join.\n        .domainRole(role)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.MySqlInstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy#fromAwsManagedPolicyName",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#mysql",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.MySqlInstanceEngineProps",
        "@aws-cdk/aws-rds.MysqlEngineVersion",
        "@aws-cdk/aws-rds.MysqlEngineVersion#VER_8_0_19"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "04a63890573eea5deed37a935915570e71a3168dfe1dda088a731117a47a1d6f"
    },
    "1a319594bbe7c24c7c06d1ab3f733af23881b9ef69c4dde5166b1ec18e122334": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nrole = iam.Role(self, \"RDSDirectoryServicesRole\",\n    assumed_by=iam.ServicePrincipal(\"rds.amazonaws.com\"),\n    managed_policies=[\n        iam.ManagedPolicy.from_aws_managed_policy_name(\"service-role/AmazonRDSDirectoryServiceAccess\")\n    ]\n)\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.mysql(version=rds.MysqlEngineVersion.VER_8_0_19),\n    vpc=vpc,\n    domain=\"d-????????\",  # The ID of the domain for the instance to join.\n    domain_role=role\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nRole role = new Role(this, \"RDSDirectoryServicesRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"rds.amazonaws.com\"),\n    ManagedPolicies = new [] { ManagedPolicy.FromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\") }\n});\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Mysql(new MySqlInstanceEngineProps { Version = MysqlEngineVersion.VER_8_0_19 }),\n    Vpc = vpc,\n    Domain = \"d-????????\",  // The ID of the domain for the instance to join.\n    DomainRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nRole role = Role.Builder.create(this, \"RDSDirectoryServicesRole\")\n        .assumedBy(new ServicePrincipal(\"rds.amazonaws.com\"))\n        .managedPolicies(List.of(ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\")))\n        .build();\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.mysql(MySqlInstanceEngineProps.builder().version(MysqlEngineVersion.VER_8_0_19).build()))\n        .vpc(vpc)\n        .domain(\"d-????????\") // The ID of the domain for the instance to join.\n        .domainRole(role)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.MysqlEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy#fromAwsManagedPolicyName",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#mysql",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.MySqlInstanceEngineProps",
        "@aws-cdk/aws-rds.MysqlEngineVersion",
        "@aws-cdk/aws-rds.MysqlEngineVersion#VER_8_0_19"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "04a63890573eea5deed37a935915570e71a3168dfe1dda088a731117a47a1d6f"
    },
    "73c6756b4f805ffded46803f5998334c378584852705a06a55742f9bf3e91d63": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OptionGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#metricCPUUtilization",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "fd8cb77cd8a244c784a0100970986f664aad034cbd1a7aa0129ef8b0cef58bc5"
    },
    "115a96bd4398a535f02d4d7fd17bea0aac1be64da0a34e1f8f657fc49d3b61f5": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OptionGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#metricCPUUtilization",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "fd8cb77cd8a244c784a0100970986f664aad034cbd1a7aa0129ef8b0cef58bc5"
    },
    "7d42f6e3a71afef938cc7177a641ea0576b28cf5e15816840921a1421a82dc38": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n    credentials=rds.Credentials.from_generated_secret(\"syscdk\"),  # Optional - will default to 'admin' username and generated password\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.SMALL),\n    Credentials = Credentials.FromGeneratedSecret(\"syscdk\"),  // Optional - will default to 'admin' username and generated password\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.SMALL))\n        .credentials(Credentials.fromGeneratedSecret(\"syscdk\")) // Optional - will default to 'admin' username and generated password\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n  credentials: rds.Credentials.fromGeneratedSecret('syscdk'), // Optional - will default to 'admin' username and generated password\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OracleEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n  credentials: rds.Credentials.fromGeneratedSecret('syscdk'), // Optional - will default to 'admin' username and generated password\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 34,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 15,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "f49b0b7562988529bce9a6cccc5c1b62e72332313bc61ef2ad32f480abb0b9f4"
    },
    "eff0b6c91d3a5961f985fd83b6e7688e8e4b43d0dde29fd418a1d95e6e6a1654": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n    credentials=rds.Credentials.from_generated_secret(\"syscdk\"),  # Optional - will default to 'admin' username and generated password\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.SMALL),\n    Credentials = Credentials.FromGeneratedSecret(\"syscdk\"),  // Optional - will default to 'admin' username and generated password\n    Vpc = vpc,\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.SMALL))\n        .credentials(Credentials.fromGeneratedSecret(\"syscdk\")) // Optional - will default to 'admin' username and generated password\n        .vpc(vpc)\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n  credentials: rds.Credentials.fromGeneratedSecret('syscdk'), // Optional - will default to 'admin' username and generated password\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.SMALL),\n  credentials: rds.Credentials.fromGeneratedSecret('syscdk'), // Optional - will default to 'admin' username and generated password\n  vpc,\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PRIVATE,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 34,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 15,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "f49b0b7562988529bce9a6cccc5c1b62e72332313bc61ef2ad32f480abb0b9f4"
    },
    "b1c76137ce050783033b75995ffd3dccb4dbb6be02308947d4ce56126b21531b": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ParameterGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#metricCPUUtilization",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "fd8cb77cd8a244c784a0100970986f664aad034cbd1a7aa0129ef8b0cef58bc5"
    },
    "b9bed2f2256844b090debeefb63234479d1a3438b194100fce3c891cc214aaa2": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ParameterGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#metricCPUUtilization",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "fd8cb77cd8a244c784a0100970986f664aad034cbd1a7aa0129ef8b0cef58bc5"
    },
    "c7ce8508d05a7f1835e0cd37bce7ea9d7cbf80965b7b2c2f7b42d5181b420538": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nmy_key = kms.Key(self, \"MyKey\")\n\nrds.DatabaseInstance(self, \"InstanceWithCustomizedSecret\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\",\n        secret_name=\"my-cool-name\",\n        encryption_key=my_key,\n        exclude_characters=\"!&*^#@()\",\n        replica_regions=[secretsmanager.ReplicaRegion(region=\"eu-west-1\"), secretsmanager.ReplicaRegion(region=\"eu-west-2\")]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nKey myKey = new Key(this, \"MyKey\");\n\nnew DatabaseInstance(this, \"InstanceWithCustomizedSecret\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\", new CredentialsBaseOptions {\n        SecretName = \"my-cool-name\",\n        EncryptionKey = myKey,\n        ExcludeCharacters = \"!&*^#@()\",\n        ReplicaRegions = new [] { new ReplicaRegion { Region = \"eu-west-1\" }, new ReplicaRegion { Region = \"eu-west-2\" } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nKey myKey = new Key(this, \"MyKey\");\n\nDatabaseInstance.Builder.create(this, \"InstanceWithCustomizedSecret\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\", CredentialsBaseOptions.builder()\n                .secretName(\"my-cool-name\")\n                .encryptionKey(myKey)\n                .excludeCharacters(\"!&*^#@()\")\n                .replicaRegions(List.of(ReplicaRegion.builder().region(\"eu-west-1\").build(), ReplicaRegion.builder().region(\"eu-west-2\").build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.PostgresEngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.CredentialsBaseOptions",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 29,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "6cb8af87d342425614fa54ef9d4d6f59badbe4a5a222c9eb62191febd45571cc"
    },
    "41081ee236b820c55afee73b8f4856bc7c6db438867194a0bde89737cd1b3b1a": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nengine = rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3)\nmy_key = kms.Key(self, \"MyKey\")\n\nrds.DatabaseInstance(self, \"InstanceWithCustomizedSecret\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.Credentials.from_generated_secret(\"postgres\",\n        secret_name=\"my-cool-name\",\n        encryption_key=my_key,\n        exclude_characters=\"!&*^#@()\",\n        replica_regions=[secretsmanager.ReplicaRegion(region=\"eu-west-1\"), secretsmanager.ReplicaRegion(region=\"eu-west-2\")]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 });\nKey myKey = new Key(this, \"MyKey\");\n\nnew DatabaseInstance(this, \"InstanceWithCustomizedSecret\", new DatabaseInstanceProps {\n    Engine = engine,\n    Vpc = vpc,\n    Credentials = Credentials.FromGeneratedSecret(\"postgres\", new CredentialsBaseOptions {\n        SecretName = \"my-cool-name\",\n        EncryptionKey = myKey,\n        ExcludeCharacters = \"!&*^#@()\",\n        ReplicaRegions = new [] { new ReplicaRegion { Region = \"eu-west-1\" }, new ReplicaRegion { Region = \"eu-west-2\" } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nIInstanceEngine engine = DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build());\nKey myKey = new Key(this, \"MyKey\");\n\nDatabaseInstance.Builder.create(this, \"InstanceWithCustomizedSecret\")\n        .engine(engine)\n        .vpc(vpc)\n        .credentials(Credentials.fromGeneratedSecret(\"postgres\", CredentialsBaseOptions.builder()\n                .secretName(\"my-cool-name\")\n                .encryptionKey(myKey)\n                .excludeCharacters(\"!&*^#@()\")\n                .replicaRegions(List.of(ReplicaRegion.builder().region(\"eu-west-1\").build(), ReplicaRegion.builder().region(\"eu-west-2\").build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromGeneratedSecret",
        "@aws-cdk/aws-rds.CredentialsBaseOptions",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst engine = rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 });\nconst myKey = new kms.Key(this, 'MyKey');\n\nnew rds.DatabaseInstance(this, 'InstanceWithCustomizedSecret', {\n  engine,\n  vpc,\n  credentials: rds.Credentials.fromGeneratedSecret('postgres', {\n    secretName: 'my-cool-name',\n    encryptionKey: myKey,\n    excludeCharacters: '!&*^#@()',\n    replicaRegions: [{ region: 'eu-west-1' }, { region: 'eu-west-2' }],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 29,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "6cb8af87d342425614fa54ef9d4d6f59badbe4a5a222c9eb62191febd45571cc"
    },
    "87f96586fb08f3efaeeaeaa1e0b7ae906794ea4dba06ed9fd2312b6e870cdd36": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.AURORA,\n    instance_props=rds.InstanceProps(vpc=vpc)\n)\n\nproxy = rds.DatabaseProxy(self, \"Proxy\",\n    proxy_target=rds.ProxyTarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.Role(self, \"DBProxyRole\", assumed_by=iam.AccountPrincipal(self.account))\nproxy.grant_connect(role, \"admin\")",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.AURORA,\n    InstanceProps = new InstanceProps { Vpc = vpc }\n});\n\nDatabaseProxy proxy = new DatabaseProxy(this, \"Proxy\", new DatabaseProxyProps {\n    ProxyTarget = ProxyTarget.FromCluster(cluster),\n    Secrets = new [] { cluster.Secret },\n    Vpc = vpc\n});\n\nRole role = new Role(this, \"DBProxyRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\nproxy.GrantConnect(role, \"admin\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.AURORA)\n        .instanceProps(InstanceProps.builder().vpc(vpc).build())\n        .build();\n\nDatabaseProxy proxy = DatabaseProxy.Builder.create(this, \"Proxy\")\n        .proxyTarget(ProxyTarget.fromCluster(cluster))\n        .secrets(List.of(cluster.getSecret()))\n        .vpc(vpc)\n        .build();\n\nRole role = Role.Builder.create(this, \"DBProxyRole\").assumedBy(new AccountPrincipal(this.account)).build();\nproxy.grantConnect(role, \"admin\");",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin'); // Grant the role connection access to the DB Proxy for database user 'admin'.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ProxyTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseCluster#secret",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseProxy",
        "@aws-cdk/aws-rds.DatabaseProxy#grantConnect",
        "@aws-cdk/aws-rds.DatabaseProxyProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IDatabaseCluster",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.ProxyTarget",
        "@aws-cdk/aws-rds.ProxyTarget#fromCluster",
        "@aws-cdk/core.Stack#account"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.AURORA,\n  instanceProps: { vpc },\n});\n\nconst proxy = new rds.DatabaseProxy(this, 'Proxy', {\n  proxyTarget: rds.ProxyTarget.fromCluster(cluster),\n  secrets: [cluster.secret!],\n  vpc,\n});\n\nconst role = new iam.Role(this, 'DBProxyRole', { assumedBy: new iam.AccountPrincipal(this.account) });\nproxy.grantConnect(role, 'admin');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 2,
        "197": 4,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7f39c98e8008c24bc0976a97c9a92a3fcf57bba44e06e5dca80b5121edbb6b98"
    },
    "e36b68fe79ff261f7b470e80102598576e7d9f6cfed049a4e1df9c5179ea2849": {
      "translations": {
        "python": {
          "source": "# instance is of type DatabaseInstance\n# my_imported_secret is of type DatabaseSecret\n\ninstance.add_rotation_multi_user(\"MyUser\",\n    secret=my_imported_secret\n)",
          "version": "1"
        },
        "csharp": {
          "source": "DatabaseInstance instance;\nDatabaseSecret myImportedSecret;\n\ninstance.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {\n    Secret = myImportedSecret\n});",
          "version": "1"
        },
        "java": {
          "source": "DatabaseInstance instance;\nDatabaseSecret myImportedSecret;\n\ninstance.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder()\n        .secret(myImportedSecret)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: rds.DatabaseInstance;\ndeclare const myImportedSecret: rds.DatabaseSecret;\ninstance.addRotationMultiUser('MyUser', {\n  secret: myImportedSecret, // This secret must have the `masterarn` key\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.RotationMultiUserOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: rds.DatabaseInstance;\ndeclare const myImportedSecret: rds.DatabaseSecret;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ninstance.addRotationMultiUser('MyUser', {\n  secret: myImportedSecret, // This secret must have the `masterarn` key\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "653ab72b0a174e2589476b859bc696ae14ab668cc45041687772ec95afdf7697"
    },
    "3c489682358dac59e72af0c2cf33c56268120377a1f8a0d00b87962ef113dd64": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n# instance is of type DatabaseInstance\n\ninstance.add_rotation_single_user(\n    automatically_after=cdk.Duration.days(7),  # defaults to 30 days\n    exclude_characters=\"!@#$%^&*\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\nDatabaseInstance instance;\ninstance.AddRotationSingleUser(new RotationSingleUserOptions {\n    AutomaticallyAfter = Duration.Days(7),  // defaults to 30 days\n    ExcludeCharacters = \"!@#$%^&*\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\nDatabaseInstance instance;\n\ninstance.addRotationSingleUser(RotationSingleUserOptions.builder()\n        .automaticallyAfter(Duration.days(7)) // defaults to 30 days\n        .excludeCharacters(\"!@#$%^&*\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\ndeclare const instance: rds.DatabaseInstance;\ninstance.addRotationSingleUser({\n  automaticallyAfter: cdk.Duration.days(7), // defaults to 30 days\n  excludeCharacters: '!@#$%^&*', // defaults to the set \" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\"\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.RotationSingleUserOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-rds.RotationSingleUserOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const instance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ninstance.addRotationSingleUser({\n  automaticallyAfter: cdk.Duration.days(7), // defaults to 30 days\n  excludeCharacters: '!@#$%^&*', // defaults to the set \" %+~`#/// here*()|[]{}:;<>?!'/@\\\"\\\\\"\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e8cb562aa2891d2e153c6173bff3eeb62b2cc75ebcd21d35305277112874ff35"
    },
    "bf3b6854b1be28309ed7d6cc77a9396a276d0d17deea4d4af1301af6639013da": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n# code is of type Code\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    enable_data_api=True\n)\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=code,\n    environment={\n        \"CLUSTER_ARN\": cluster.cluster_arn,\n        \"SECRET_ARN\": cluster.secret.secret_arn\n    }\n)\ncluster.grant_data_api_access(fn)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nCode code;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    EnableDataApi = true\n});\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = code,\n    Environment = new Dictionary<string, string> {\n        { \"CLUSTER_ARN\", cluster.ClusterArn },\n        { \"SECRET_ARN\", cluster.Secret.SecretArn }\n    }\n});\ncluster.GrantDataApiAccess(fn);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nCode code;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .enableDataApi(true)\n        .build();\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(code)\n        .environment(Map.of(\n                \"CLUSTER_ARN\", cluster.getClusterArn(),\n                \"SECRET_ARN\", cluster.getSecret().getSecretArn()))\n        .build();\ncluster.grantDataApiAccess(fn);",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  enableDataApi: true, // Optional - will be automatically set if you call grantDataApiAccess()\n});\n\ndeclare const code: lambda.Code;\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code,\n  environment: {\n    CLUSTER_ARN: cluster.clusterArn,\n    SECRET_ARN: cluster.secret!.secretArn,\n  },\n});\ncluster.grantDataApiAccess(fn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ServerlessCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessCluster#secret",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-secretsmanager.ISecret#secretArn"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const code: lambda.Code;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  enableDataApi: true, // Optional - will be automatically set if you call grantDataApiAccess()\n});\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code,\n  environment: {\n    CLUSTER_ARN: cluster.clusterArn,\n    SECRET_ARN: cluster.secret!.secretArn,\n  },\n});\ncluster.grantDataApiAccess(fn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 35,
        "104": 2,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 10,
        "196": 1,
        "197": 2,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 7,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "55f008ebed0d6657b08427cbf1df38d5c68c60433707b2a57612d84192a1bf34"
    },
    "5877245ffb08be3f7b21df4db6af319d2443b63d5b3e0ac3991cc9dcbb365272": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n# code is of type Code\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    enable_data_api=True\n)\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=code,\n    environment={\n        \"CLUSTER_ARN\": cluster.cluster_arn,\n        \"SECRET_ARN\": cluster.secret.secret_arn\n    }\n)\ncluster.grant_data_api_access(fn)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nCode code;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    EnableDataApi = true\n});\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = code,\n    Environment = new Dictionary<string, string> {\n        { \"CLUSTER_ARN\", cluster.ClusterArn },\n        { \"SECRET_ARN\", cluster.Secret.SecretArn }\n    }\n});\ncluster.GrantDataApiAccess(fn);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nCode code;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .enableDataApi(true)\n        .build();\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(code)\n        .environment(Map.of(\n                \"CLUSTER_ARN\", cluster.getClusterArn(),\n                \"SECRET_ARN\", cluster.getSecret().getSecretArn()))\n        .build();\ncluster.grantDataApiAccess(fn);",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  enableDataApi: true, // Optional - will be automatically set if you call grantDataApiAccess()\n});\n\ndeclare const code: lambda.Code;\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code,\n  environment: {\n    CLUSTER_ARN: cluster.clusterArn,\n    SECRET_ARN: cluster.secret!.secretArn,\n  },\n});\ncluster.grantDataApiAccess(fn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ServerlessClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessCluster#secret",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-secretsmanager.ISecret#secretArn"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const code: lambda.Code;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  enableDataApi: true, // Optional - will be automatically set if you call grantDataApiAccess()\n});\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code,\n  environment: {\n    CLUSTER_ARN: cluster.clusterArn,\n    SECRET_ARN: cluster.secret!.secretArn,\n  },\n});\ncluster.grantDataApiAccess(fn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 35,
        "104": 2,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 10,
        "196": 1,
        "197": 2,
        "218": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 7,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "55f008ebed0d6657b08427cbf1df38d5c68c60433707b2a57612d84192a1bf34"
    },
    "6f0e446c400e2d7790806184b25be93282f300a56c8dd2f2c5c00ab8f4ed29b4": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = rds.ServerlessCluster(self, \"AnotherCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n    parameter_group=rds.ParameterGroup.from_parameter_group_name(self, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    vpc=vpc,\n    scaling=rds.ServerlessScalingOptions(\n        auto_pause=Duration.minutes(10),  # default is to pause after 5 minutes of idle time\n        min_capacity=rds.AuroraCapacityUnit.ACU_8,  # default is 2 Aurora capacity units (ACUs)\n        max_capacity=rds.AuroraCapacityUnit.ACU_32\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = new ServerlessCluster(this, \"AnotherCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_POSTGRESQL,\n    ParameterGroup = ParameterGroup.FromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"),\n    Vpc = vpc,\n    Scaling = new ServerlessScalingOptions {\n        AutoPause = Duration.Minutes(10),  // default is to pause after 5 minutes of idle time\n        MinCapacity = AuroraCapacityUnit.ACU_8,  // default is 2 Aurora capacity units (ACUs)\n        MaxCapacity = AuroraCapacityUnit.ACU_32\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AnotherCluster\")\n        .engine(DatabaseClusterEngine.AURORA_POSTGRESQL)\n        .parameterGroup(ParameterGroup.fromParameterGroupName(this, \"ParameterGroup\", \"default.aurora-postgresql10\"))\n        .vpc(vpc)\n        .scaling(ServerlessScalingOptions.builder()\n                .autoPause(Duration.minutes(10)) // default is to pause after 5 minutes of idle time\n                .minCapacity(AuroraCapacityUnit.ACU_8) // default is 2 Aurora capacity units (ACUs)\n                .maxCapacity(AuroraCapacityUnit.ACU_32)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.ServerlessScalingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-rds.AuroraCapacityUnit",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_32",
        "@aws-cdk/aws-rds.AuroraCapacityUnit#ACU_8",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_POSTGRESQL",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroup#fromParameterGroupName",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-rds.ServerlessScalingOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new rds.ServerlessCluster(this, 'AnotherCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,\n  parameterGroup: rds.ParameterGroup.fromParameterGroupName(this, 'ParameterGroup', 'default.aurora-postgresql10'),\n  vpc,\n  scaling: {\n    autoPause: Duration.minutes(10), // default is to pause after 5 minutes of idle time\n    minCapacity: rds.AuroraCapacityUnit.ACU_8, // default is 2 Aurora capacity units (ACUs)\n    maxCapacity: rds.AuroraCapacityUnit.ACU_32, // default is 16 Aurora capacity units (ACUs)\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 10,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "798a4563fd2efb0e433d25b55b22ca50a99e1abbc4a76344ee3997b9f34eb6fd"
    },
    "97dd10438a37ee504eed8eb4a135582fb52d20f555028674dad86daf7d4be0cf": {
      "translations": {
        "python": {
          "source": "# Set open cursors with parameter group\nparameter_group = rds.ParameterGroup(self, \"ParameterGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.OptionGroup(self, \"OptionGroup\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    configurations=[rds.OptionConfiguration(\n        name=\"LOCATOR\"\n    ), rds.OptionConfiguration(\n        name=\"OEM\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# Allow connections to OEM\noption_group.option_connections.OEM.connections.allow_default_port_from_any_ipv4()\n\n# Database instance with production values\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.oracle_se2(version=rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1),\n    license_model=rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n    multi_az=True,\n    storage_type=rds.StorageType.IO1,\n    credentials=rds.Credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"ORCL\",\n    storage_encrypted=True,\n    backup_retention=cdk.Duration.days(7),\n    monitoring_interval=cdk.Duration.seconds(60),\n    enable_performance_insights=True,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.RetentionDays.ONE_MONTH,\n    auto_minor_version_upgrade=False,\n    option_group=option_group,\n    parameter_group=parameter_group\n)\n\n# Allow connections on default port from any IPV4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# Rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# Add alarm for high CPU\ncloudwatch.Alarm(self, \"HighCPU\",\n    metric=instance.metric_cPUUtilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# Trigger Lambda function on instance availability events\nfn = lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\navailability_rule = instance.on_event(\"Availability\", target=targets.LambdaFunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"EventCategories\": [\"availability\"\n        ]\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = new ParameterGroup(this, \"ParameterGroup\", new ParameterGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Parameters = new Dictionary<string, string> {\n        { \"open_cursors\", \"2500\" }\n    }\n});\n\nOptionGroup optionGroup = new OptionGroup(this, \"OptionGroup\", new OptionGroupProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    Configurations = new [] { new OptionConfiguration {\n        Name = \"LOCATOR\"\n    }, new OptionConfiguration {\n        Name = \"OEM\",\n        Port = 1158,\n        Vpc = vpc\n    } }\n});\n\n// Allow connections to OEM\noptionGroup.OptionConnections.OEM.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.OracleSe2(new OracleSe2InstanceEngineProps { Version = OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n    LicenseModel = LicenseModel.BRING_YOUR_OWN_LICENSE,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM),\n    MultiAz = true,\n    StorageType = StorageType.IO1,\n    Credentials = Credentials.FromUsername(\"syscdk\"),\n    Vpc = vpc,\n    DatabaseName = \"ORCL\",\n    StorageEncrypted = true,\n    BackupRetention = Duration.Days(7),\n    MonitoringInterval = Duration.Seconds(60),\n    EnablePerformanceInsights = true,\n    CloudwatchLogsExports = new [] { \"trace\", \"audit\", \"alert\", \"listener\" },\n    CloudwatchLogsRetention = RetentionDays.ONE_MONTH,\n    AutoMinorVersionUpgrade = false,\n    OptionGroup = optionGroup,\n    ParameterGroup = parameterGroup\n});\n\n// Allow connections on default port from any IPV4\ninstance.Connections.AllowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.AddRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nnew Alarm(this, \"HighCPU\", new AlarmProps {\n    Metric = instance.MetricCPUUtilization(),\n    Threshold = 90,\n    EvaluationPeriods = 1\n});\n\n// Trigger Lambda function on instance availability events\nFunction fn = new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\nRule availabilityRule = instance.OnEvent(\"Availability\", new OnEventOptions { Target = new LambdaFunction(fn) });\navailabilityRule.AddEventPattern(new EventPattern {\n    Detail = new Dictionary<string, object> {\n        { \"EventCategories\", new [] { \"availability\" } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Set open cursors with parameter group\nParameterGroup parameterGroup = ParameterGroup.Builder.create(this, \"ParameterGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .parameters(Map.of(\n                \"open_cursors\", \"2500\"))\n        .build();\n\nOptionGroup optionGroup = OptionGroup.Builder.create(this, \"OptionGroup\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .configurations(List.of(OptionConfiguration.builder()\n                .name(\"LOCATOR\")\n                .build(), OptionConfiguration.builder()\n                .name(\"OEM\")\n                .port(1158)\n                .vpc(vpc)\n                .build()))\n        .build();\n\n// Allow connections to OEM\noptionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n// Database instance with production values\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.oracleSe2(OracleSe2InstanceEngineProps.builder().version(OracleEngineVersion.VER_19_0_0_0_2020_04_R1).build()))\n        .licenseModel(LicenseModel.BRING_YOUR_OWN_LICENSE)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MEDIUM))\n        .multiAz(true)\n        .storageType(StorageType.IO1)\n        .credentials(Credentials.fromUsername(\"syscdk\"))\n        .vpc(vpc)\n        .databaseName(\"ORCL\")\n        .storageEncrypted(true)\n        .backupRetention(Duration.days(7))\n        .monitoringInterval(Duration.seconds(60))\n        .enablePerformanceInsights(true)\n        .cloudwatchLogsExports(List.of(\"trace\", \"audit\", \"alert\", \"listener\"))\n        .cloudwatchLogsRetention(RetentionDays.ONE_MONTH)\n        .autoMinorVersionUpgrade(false)\n        .optionGroup(optionGroup)\n        .parameterGroup(parameterGroup)\n        .build();\n\n// Allow connections on default port from any IPV4\ninstance.connections.allowDefaultPortFromAnyIpv4();\n\n// Rotate the master user password every 30 days\ninstance.addRotationSingleUser();\n\n// Add alarm for high CPU\n// Add alarm for high CPU\nAlarm.Builder.create(this, \"HighCPU\")\n        .metric(instance.metricCPUUtilization())\n        .threshold(90)\n        .evaluationPeriods(1)\n        .build();\n\n// Trigger Lambda function on instance availability events\nFunction fn = Function.Builder.create(this, \"Function\")\n        .code(Code.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\nRule availabilityRule = instance.onEvent(\"Availability\", OnEventOptions.builder().target(new LambdaFunction(fn)).build());\navailabilityRule.addEventPattern(EventPattern.builder()\n        .detail(Map.of(\n                \"EventCategories\", List.of(\"availability\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-rds.StorageType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#connections",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE3",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MEDIUM",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addEventPattern",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_MONTH",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.Credentials#fromUsername",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#metricCPUUtilization",
        "@aws-cdk/aws-rds.DatabaseInstanceBase#onEvent",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#oracleSe2",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.IOptionGroup",
        "@aws-cdk/aws-rds.IParameterGroup",
        "@aws-cdk/aws-rds.LicenseModel",
        "@aws-cdk/aws-rds.LicenseModel#BRING_YOUR_OWN_LICENSE",
        "@aws-cdk/aws-rds.OptionGroup",
        "@aws-cdk/aws-rds.OptionGroup#optionConnections",
        "@aws-cdk/aws-rds.OptionGroupProps",
        "@aws-cdk/aws-rds.OracleEngineVersion",
        "@aws-cdk/aws-rds.OracleEngineVersion#VER_19_0_0_0_2020_04_R1",
        "@aws-cdk/aws-rds.OracleSe2InstanceEngineProps",
        "@aws-cdk/aws-rds.ParameterGroup",
        "@aws-cdk/aws-rds.ParameterGroupProps",
        "@aws-cdk/aws-rds.StorageType",
        "@aws-cdk/aws-rds.StorageType#IO1",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as cdk from '@aws-cdk/core';\nimport * as rds from '../lib';\n\nconst app = new cdk.App();\n\nclass DatabaseInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    /// !show\n    // Set open cursors with parameter group\n    const parameterGroup = new rds.ParameterGroup(this, 'ParameterGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      parameters: {\n        open_cursors: '2500',\n      },\n    });\n\n    /// Add XMLDB and OEM with option group\n    const optionGroup = new rds.OptionGroup(this, 'OptionGroup', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      configurations: [\n        {\n          name: 'LOCATOR',\n        },\n        {\n          name: 'OEM',\n          port: 1158,\n          vpc,\n        },\n      ],\n    });\n\n    // Allow connections to OEM\n    optionGroup.optionConnections.OEM.connections.allowDefaultPortFromAnyIpv4();\n\n    // Database instance with production values\n    const instance = new rds.DatabaseInstance(this, 'Instance', {\n      engine: rds.DatabaseInstanceEngine.oracleSe2({ version: rds.OracleEngineVersion.VER_19_0_0_0_2020_04_R1 }),\n      licenseModel: rds.LicenseModel.BRING_YOUR_OWN_LICENSE,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),\n      multiAz: true,\n      storageType: rds.StorageType.IO1,\n      credentials: rds.Credentials.fromUsername('syscdk'),\n      vpc,\n      databaseName: 'ORCL',\n      storageEncrypted: true,\n      backupRetention: cdk.Duration.days(7),\n      monitoringInterval: cdk.Duration.seconds(60),\n      enablePerformanceInsights: true,\n      cloudwatchLogsExports: [\n        'trace',\n        'audit',\n        'alert',\n        'listener',\n      ],\n      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,\n      autoMinorVersionUpgrade: false,\n      optionGroup,\n      parameterGroup,\n    });\n\n    // Allow connections on default port from any IPV4\n    instance.connections.allowDefaultPortFromAnyIpv4();\n\n    // Rotate the master user password every 30 days\n    instance.addRotationSingleUser();\n\n    // Add alarm for high CPU\n    new cloudwatch.Alarm(this, 'HighCPU', {\n      metric: instance.metricCPUUtilization(),\n      threshold: 90,\n      evaluationPeriods: 1,\n    });\n\n    // Trigger Lambda function on instance availability events\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline('exports.handler = (event) => console.log(event);'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n    });\n\n    const availabilityRule = instance.onEvent('Availability', { target: new targets.LambdaFunction(fn) });\n    availabilityRule.addEventPattern({\n      detail: {\n        EventCategories: [\n          'availability',\n        ],\n      },\n    });\n    /// !hide\n  }\n}\n\nnew DatabaseInstanceStack(app, 'aws-cdk-rds-instance');\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 18,
        "75": 123,
        "91": 1,
        "104": 5,
        "106": 3,
        "192": 3,
        "193": 14,
        "194": 50,
        "196": 14,
        "197": 6,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 34,
        "282": 4
      },
      "fqnsFingerprint": "fd8cb77cd8a244c784a0100970986f664aad034cbd1a7aa0129ef8b0cef58bc5"
    }
  }
}
